// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convolution_convolution_Pipeline_VITIS_LOOP_27_2_VITIS_LOOP_28_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        in_img,
        out_img
);

parameter    ap_ST_fsm_pp0_stage0 = 9'd1;
parameter    ap_ST_fsm_pp0_stage1 = 9'd2;
parameter    ap_ST_fsm_pp0_stage2 = 9'd4;
parameter    ap_ST_fsm_pp0_stage3 = 9'd8;
parameter    ap_ST_fsm_pp0_stage4 = 9'd16;
parameter    ap_ST_fsm_pp0_stage5 = 9'd32;
parameter    ap_ST_fsm_pp0_stage6 = 9'd64;
parameter    ap_ST_fsm_pp0_stage7 = 9'd128;
parameter    ap_ST_fsm_pp0_stage8 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [7:0] m_axi_gmem_WDATA;
output  [0:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [7:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [10:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] in_img;
input  [63:0] out_img;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage8;
reg   [0:0] icmp_ln27_reg_632;
reg    ap_block_state9_io;
reg    ap_block_state18_pp0_stage8_iter1;
reg   [0:0] icmp_ln28_1_reg_651;
reg   [0:0] icmp_ln28_1_reg_651_pp0_iter2_reg;
reg    ap_block_state27_pp0_stage8_iter2;
reg    ap_block_pp0_stage8_subdone;
reg    ap_condition_exit_pp0_iter0_stage8;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_B;
reg    gmem_blk_n_W;
reg    gmem_blk_n_AW;
reg   [0:0] or_ln27_reg_641;
reg   [7:0] reg_191;
reg    ap_block_state11_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state13_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
reg   [7:0] reg_195;
reg    ap_block_state14_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_state6_io;
reg    ap_block_state15_pp0_stage5_iter1;
reg    ap_block_pp0_stage5_11001;
reg    ap_block_state16_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
reg   [7:0] reg_199;
reg    ap_block_state17_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_11001;
reg    ap_block_pp0_stage8_11001;
reg    ap_block_state19_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln27_fu_229_p2;
wire   [0:0] icmp_ln28_fu_247_p2;
reg   [0:0] icmp_ln28_reg_636;
wire   [0:0] or_ln27_fu_253_p2;
wire   [6:0] select_ln27_1_fu_259_p3;
reg   [6:0] select_ln27_1_reg_645;
wire   [0:0] icmp_ln28_1_fu_281_p2;
reg   [0:0] icmp_ln28_1_reg_651_pp0_iter1_reg;
reg   [63:0] gmem_addr_reg_655;
reg   [63:0] gmem_addr_1_reg_661;
reg   [63:0] gmem_addr_2_reg_667;
reg   [63:0] gmem_addr_3_reg_673;
reg   [7:0] gmem_addr_1_read_1_reg_679;
reg    ap_predicate_op92_writereq_state3;
reg    ap_block_state3_io;
reg    ap_block_state12_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire   [8:0] add_ln33_6_fu_450_p2;
reg   [8:0] add_ln33_6_reg_684;
wire   [9:0] add_ln33_8_fu_477_p2;
reg   [9:0] add_ln33_8_reg_689;
wire   [11:0] sub_ln33_fu_498_p2;
reg   [11:0] sub_ln33_reg_694;
wire   [11:0] sub_ln33_2_fu_517_p2;
reg   [11:0] sub_ln33_2_reg_699;
reg   [7:0] gmem_addr_3_read_2_reg_704;
wire   [0:0] icmp_ln37_fu_571_p2;
reg   [0:0] icmp_ln37_reg_709;
wire   [7:0] trunc_ln38_fu_577_p1;
reg   [7:0] trunc_ln38_reg_714;
wire   [7:0] select_ln38_fu_581_p3;
reg   [7:0] select_ln38_reg_719;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_183_p4;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] empty_21_fu_335_p2;
wire   [63:0] add_ln33_4_fu_404_p2;
wire   [63:0] add_ln33_2_fu_393_p2;
wire   [63:0] add_ln33_1_fu_375_p2;
reg    ap_block_pp0_stage3_01001;
reg   [6:0] j_fu_96;
wire   [6:0] select_ln33_fu_273_p3;
reg   [6:0] ap_sig_allocacmp_j_1;
reg   [6:0] indvar48_fu_100;
wire   [6:0] add_ln28_fu_428_p2;
reg   [6:0] add_ln271_fu_104;
wire   [6:0] add_ln27_fu_287_p2;
reg   [6:0] indvar_fu_108;
reg   [6:0] ap_sig_allocacmp_indvar_load;
reg   [13:0] indvar_flatten_fu_112;
wire   [13:0] add_ln27_1_fu_235_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [6:0] add_ln33_5_fu_267_p2;
wire   [13:0] tmp_1_fu_318_p3;
wire   [13:0] tmp_fu_325_p2;
wire   [63:0] tmp_cast_fu_331_p1;
wire   [6:0] select_ln27_fu_311_p3;
wire   [63:0] p_cast_fu_346_p1;
wire   [7:0] zext_ln33_fu_359_p1;
wire   [8:0] zext_ln33_cast_fu_363_p3;
wire   [63:0] zext_ln33_1_fu_371_p1;
wire   [63:0] add_ln33_fu_354_p2;
wire   [7:0] zext_ln33_1_cast_fu_381_p3;
wire   [63:0] zext_ln33_6_fu_389_p1;
wire   [63:0] zext_ln28_fu_350_p1;
wire   [63:0] add_ln33_3_fu_399_p2;
wire   [8:0] zext_ln33_3_fu_447_p1;
wire   [8:0] zext_ln33_2_fu_443_p1;
wire   [8:0] zext_ln33_4_fu_456_p1;
wire   [8:0] zext_ln33_5_fu_460_p1;
wire   [8:0] add_ln33_7_fu_467_p2;
wire   [9:0] zext_ln33_12_fu_473_p1;
wire   [9:0] zext_ln33_11_fu_464_p1;
wire   [10:0] shl_ln_fu_483_p3;
wire   [11:0] zext_ln30_fu_491_p1;
wire   [11:0] zext_ln33_13_fu_495_p1;
wire   [11:0] zext_ln33_7_fu_504_p1;
wire   [11:0] sub_ln33_1_fu_512_p2;
wire   [11:0] zext_ln33_8_fu_508_p1;
wire   [11:0] zext_ln33_9_fu_523_p1;
wire   [11:0] sum_3_fu_530_p2;
wire   [11:0] zext_ln33_10_fu_527_p1;
wire   [11:0] sum_fu_535_p2;
wire   [0:0] tmp_2_fu_545_p3;
wire   [10:0] trunc_ln30_fu_541_p1;
wire   [10:0] sum_2_fu_553_p3;
wire   [2:0] tmp_3_fu_561_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_761;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_96 = 7'd0;
#0 indvar48_fu_100 = 7'd0;
#0 add_ln271_fu_104 = 7'd0;
#0 indvar_fu_108 = 7'd0;
#0 indvar_flatten_fu_112 = 14'd0;
#0 ap_done_reg = 1'b0;
end

convolution_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage8),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage8)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar48_fu_100 <= 7'd0;
    end else if (((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar48_fu_100 <= add_ln28_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln27_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_112 <= add_ln27_1_fu_235_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_112 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_fu_108 <= 7'd0;
    end else if (((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_fu_108 <= select_ln27_1_reg_645;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln27_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_96 <= select_ln33_fu_273_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_96 <= 7'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln271_fu_104 <= add_ln27_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln33_6_reg_684 <= add_ln33_6_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        add_ln33_8_reg_689 <= add_ln33_8_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        sub_ln33_2_reg_699 <= sub_ln33_2_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem_addr_1_read_1_reg_679 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem_addr_1_reg_661 <= add_ln33_4_fu_404_p2;
        gmem_addr_2_reg_667 <= add_ln33_2_fu_393_p2;
        gmem_addr_3_reg_673 <= add_ln33_1_fu_375_p2;
        gmem_addr_reg_655 <= empty_21_fu_335_p2;
        icmp_ln37_reg_709 <= icmp_ln37_fu_571_p2;
        trunc_ln38_reg_714 <= trunc_ln38_fu_577_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_3_read_2_reg_704 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln27_reg_632 <= icmp_ln27_fu_229_p2;
        icmp_ln28_1_reg_651 <= icmp_ln28_1_fu_281_p2;
        icmp_ln28_1_reg_651_pp0_iter1_reg <= icmp_ln28_1_reg_651;
        icmp_ln28_1_reg_651_pp0_iter2_reg <= icmp_ln28_1_reg_651_pp0_iter1_reg;
        icmp_ln28_reg_636 <= icmp_ln28_fu_247_p2;
        or_ln27_reg_641 <= or_ln27_fu_253_p2;
        select_ln27_1_reg_645 <= select_ln27_1_fu_259_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_191 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)))) begin
        reg_195 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)))) begin
        reg_199 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        select_ln38_reg_719 <= select_ln38_fu_581_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        sub_ln33_reg_694 <= sub_ln33_fu_498_p2;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_632 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
        ap_condition_exit_pp0_iter0_stage8 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_761)) begin
            ap_phi_mux_first_iter_0_phi_fu_183_p4 = 1'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_0_phi_fu_183_p4 = 1'd1;
        end else begin
            ap_phi_mux_first_iter_0_phi_fu_183_p4 = 1'd0;
        end
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_183_p4 = 1'd0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_112;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_load = indvar_fu_108;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 7'd1;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_96;
    end
end

always @ (*) begin
    if ((((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8)) | ((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5)) | ((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (or_ln27_reg_641 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (icmp_ln28_1_reg_651_pp0_iter2_reg == 1'd1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_3_reg_673;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_2_reg_667;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_1_reg_661;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op92_writereq_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln28_1_reg_651_pp0_iter2_reg == 1'd1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_1_fu_235_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln27_fu_287_p2 = (select_ln27_1_fu_259_p3 + 7'd1);

assign add_ln28_fu_428_p2 = (select_ln27_fu_311_p3 + 7'd1);

assign add_ln33_1_fu_375_p2 = (zext_ln33_1_fu_371_p1 + add_ln33_fu_354_p2);

assign add_ln33_2_fu_393_p2 = (zext_ln33_6_fu_389_p1 + add_ln33_fu_354_p2);

assign add_ln33_3_fu_399_p2 = (zext_ln28_fu_350_p1 + in_img);

assign add_ln33_4_fu_404_p2 = (add_ln33_3_fu_399_p2 + p_cast_fu_346_p1);

assign add_ln33_5_fu_267_p2 = (ap_sig_allocacmp_j_1 + 7'd1);

assign add_ln33_6_fu_450_p2 = (zext_ln33_3_fu_447_p1 + zext_ln33_2_fu_443_p1);

assign add_ln33_7_fu_467_p2 = (zext_ln33_4_fu_456_p1 + zext_ln33_5_fu_460_p1);

assign add_ln33_8_fu_477_p2 = (zext_ln33_12_fu_473_p1 + zext_ln33_11_fu_464_p1);

assign add_ln33_fu_354_p2 = (p_cast_fu_346_p1 + in_img);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state19_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state19_pp0_stage0_iter2));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage1_iter1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage1_iter1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage2_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage2_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage3_iter1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage3_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage3_iter1)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage4_iter1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage4_iter1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state15_pp0_stage5_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state15_pp0_stage5_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state16_pp0_stage6_iter1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state16_pp0_stage6_iter1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage7_iter1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage7_iter1));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state27_pp0_stage8_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state18_pp0_stage8_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state27_pp0_stage8_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state18_pp0_stage8_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state13_pp0_stage3_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state14_pp0_stage4_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state15_pp0_stage5_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state16_pp0_stage6_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state17_pp0_stage7_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state18_pp0_stage8_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state19_pp0_stage0_iter2 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state27_pp0_stage8_iter2 = ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln28_1_reg_651_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_block_state3_io = (((m_axi_gmem_AWREADY == 1'b0) & (ap_predicate_op92_writereq_state3 == 1'b1)) | ((icmp_ln27_reg_632 == 1'd0) & (m_axi_gmem_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state6_io = ((icmp_ln27_reg_632 == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state9_io = ((icmp_ln27_reg_632 == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

always @ (*) begin
    ap_condition_761 = ((icmp_ln27_reg_632 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage8;

always @ (*) begin
    ap_predicate_op92_writereq_state3 = ((icmp_ln27_reg_632 == 1'd0) & (or_ln27_reg_641 == 1'd1));
end

assign ap_ready = ap_ready_sig;

assign empty_21_fu_335_p2 = (tmp_cast_fu_331_p1 + out_img);

assign icmp_ln27_fu_229_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd15876) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_281_p2 = ((select_ln33_fu_273_p3 == 7'd127) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_247_p2 = ((ap_sig_allocacmp_j_1 == 7'd127) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_571_p2 = ((tmp_3_fu_561_p4 != 3'd0) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 64'd3;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_reg_655;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 64'd126;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = select_ln38_reg_719;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 1'd1;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln27_fu_253_p2 = (icmp_ln28_fu_247_p2 | ap_phi_mux_first_iter_0_phi_fu_183_p4);

assign p_cast_fu_346_p1 = tmp_1_fu_318_p3;

assign select_ln27_1_fu_259_p3 = ((icmp_ln28_fu_247_p2[0:0] == 1'b1) ? add_ln271_fu_104 : ap_sig_allocacmp_indvar_load);

assign select_ln27_fu_311_p3 = ((icmp_ln28_reg_636[0:0] == 1'b1) ? 7'd0 : indvar48_fu_100);

assign select_ln33_fu_273_p3 = ((icmp_ln28_fu_247_p2[0:0] == 1'b1) ? 7'd2 : add_ln33_5_fu_267_p2);

assign select_ln38_fu_581_p3 = ((icmp_ln37_reg_709[0:0] == 1'b1) ? 8'd255 : trunc_ln38_reg_714);

assign shl_ln_fu_483_p3 = {{reg_195}, {3'd0}};

assign sub_ln33_1_fu_512_p2 = (sub_ln33_reg_694 - zext_ln33_7_fu_504_p1);

assign sub_ln33_2_fu_517_p2 = (sub_ln33_1_fu_512_p2 - zext_ln33_8_fu_508_p1);

assign sub_ln33_fu_498_p2 = (zext_ln30_fu_491_p1 - zext_ln33_13_fu_495_p1);

assign sum_2_fu_553_p3 = ((tmp_2_fu_545_p3[0:0] == 1'b1) ? 11'd0 : trunc_ln30_fu_541_p1);

assign sum_3_fu_530_p2 = (sub_ln33_2_reg_699 - zext_ln33_9_fu_523_p1);

assign sum_fu_535_p2 = (sum_3_fu_530_p2 - zext_ln33_10_fu_527_p1);

assign tmp_1_fu_318_p3 = {{select_ln27_1_reg_645}, {7'd0}};

assign tmp_2_fu_545_p3 = sum_fu_535_p2[32'd11];

assign tmp_3_fu_561_p4 = {{sum_2_fu_553_p3[10:8]}};

assign tmp_cast_fu_331_p1 = tmp_fu_325_p2;

assign tmp_fu_325_p2 = (tmp_1_fu_318_p3 + 14'd129);

assign trunc_ln30_fu_541_p1 = sum_fu_535_p2[10:0];

assign trunc_ln38_fu_577_p1 = sum_2_fu_553_p3[7:0];

assign zext_ln28_fu_350_p1 = select_ln27_fu_311_p3;

assign zext_ln30_fu_491_p1 = shl_ln_fu_483_p3;

assign zext_ln33_10_fu_527_p1 = gmem_addr_3_read_2_reg_704;

assign zext_ln33_11_fu_464_p1 = add_ln33_6_reg_684;

assign zext_ln33_12_fu_473_p1 = add_ln33_7_fu_467_p2;

assign zext_ln33_13_fu_495_p1 = add_ln33_8_reg_689;

assign zext_ln33_1_cast_fu_381_p3 = {{1'd1}, {select_ln27_fu_311_p3}};

assign zext_ln33_1_fu_371_p1 = zext_ln33_cast_fu_363_p3;

assign zext_ln33_2_fu_443_p1 = reg_191;

assign zext_ln33_3_fu_447_p1 = gmem_addr_1_read_1_reg_679;

assign zext_ln33_4_fu_456_p1 = reg_191;

assign zext_ln33_5_fu_460_p1 = reg_195;

assign zext_ln33_6_fu_389_p1 = zext_ln33_1_cast_fu_381_p3;

assign zext_ln33_7_fu_504_p1 = reg_195;

assign zext_ln33_8_fu_508_p1 = reg_199;

assign zext_ln33_9_fu_523_p1 = reg_199;

assign zext_ln33_cast_fu_363_p3 = {{1'd1}, {zext_ln33_fu_359_p1}};

assign zext_ln33_fu_359_p1 = select_ln27_fu_311_p3;

endmodule //convolution_convolution_Pipeline_VITIS_LOOP_27_2_VITIS_LOOP_28_3
