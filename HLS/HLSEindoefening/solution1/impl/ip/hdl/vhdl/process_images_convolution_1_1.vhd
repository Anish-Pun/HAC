-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_images_convolution_1_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_height : IN STD_LOGIC_VECTOR (31 downto 0);
    img_width : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of process_images_convolution_1_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (65 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (65 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (65 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (65 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (65 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (65 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (65 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (65 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (65 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (65 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (65 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sub_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub2_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub2_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln7_fu_271_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln7_reg_677 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln7_1_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln7_1_reg_683 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_255_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal empty_reg_691 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln7_fu_309_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln7_reg_697 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln7_fu_313_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln7_reg_702 : STD_LOGIC_VECTOR (30 downto 0);
    signal cmp20_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp20_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev47_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev47_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_55_fu_350_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal empty_55_reg_725 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln15_fu_365_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_reg_730 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln15_1_fu_370_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_1_reg_736 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_2_fu_375_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_2_reg_742 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_fu_389_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln8_reg_751 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln14_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_756 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_reg_768 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_772 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_778 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln9_fu_428_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln9_reg_783 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln12_1_fu_432_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln12_1_reg_789 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln14_1_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_reg_794 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln14_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln14_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_1_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_1_reg_806 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_4_reg_810 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_read_reg_816 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln9_fu_482_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln9_reg_821 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal or_ln14_2_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_2_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_5_reg_831 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_5_read_reg_837 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln14_3_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_3_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal gmem_addr_6_reg_846 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_6_read_reg_852 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln9_1_fu_533_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln9_1_reg_857 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal or_ln14_4_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_4_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_7_reg_867 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_7_read_reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln14_5_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_5_reg_878 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal gmem_addr_8_reg_882 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_8_read_reg_888 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_10_fu_577_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal add_ln21_fu_583_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln21_reg_898 : STD_LOGIC_VECTOR (21 downto 0);
    signal x_reg_183 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_phi_mux_sum_1_phi_fu_199_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_reg_195 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln8_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_2_fu_476_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_sum_3_phi_fu_209_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_3_reg_206 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_4_fu_503_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_sum_5_phi_fu_218_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_5_reg_215 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_6_fu_526_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_sum_7_phi_fu_228_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_7_reg_225 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_8_fu_554_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_sum_9_phi_fu_238_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_9_reg_235 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_11_reg_245 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln21_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_3_fu_413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_4_fu_462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_5_fu_490_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_7_fu_513_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_8_fu_541_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_10_fu_564_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_y_fu_76 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal output_r_we0_local : STD_LOGIC;
    signal select_ln21_fu_627_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_r_ce0_local : STD_LOGIC;
    signal empty_fu_255_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_255_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub2_fu_265_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln7_fu_271_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_275_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln7_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln7_cast_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt46_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast7_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_6_fu_360_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln7_2_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_fu_393_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln14_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln14_2_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln14_1_fu_446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln14_1_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln15_fu_473_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_1_fu_500_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln15_2_fu_523_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln15_3_fu_551_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln15_4_fu_574_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_591_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln9_fu_587_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_12_fu_599_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_607_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_fu_623_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln7_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal empty_fu_255_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component process_images_mul_32s_31ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;



begin
    mul_32s_31ns_63_1_1_U9 : component process_images_mul_32s_31ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 63)
    port map (
        din0 => empty_fu_255_p0,
        din1 => empty_fu_255_p1,
        dout => empty_fu_255_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    pos_y_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pos_y_fu_76 <= ap_const_lv31_1;
            elsif (((icmp_ln8_fu_384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                pos_y_fu_76 <= add_ln7_reg_702;
            end if; 
        end if;
    end process;

    sum_11_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln14_5_fu_560_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                sum_11_reg_245 <= ap_phi_mux_sum_9_phi_fu_238_p4;
            elsif (((or_ln14_5_reg_878 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                sum_11_reg_245 <= sum_10_fu_577_p2;
            end if; 
        end if;
    end process;

    sum_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_384_p2 = ap_const_lv1_1) and (or_ln14_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_1_reg_195 <= ap_const_lv8_0;
            elsif (((or_ln14_reg_768 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                sum_1_reg_195 <= sum_reg_778;
            end if; 
        end if;
    end process;

    sum_3_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln14_1_fu_457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                sum_3_reg_206 <= zext_ln9_fu_428_p1;
            elsif (((or_ln14_1_reg_806 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                sum_3_reg_206 <= sum_2_fu_476_p2;
            end if; 
        end if;
    end process;

    sum_5_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln14_2_fu_486_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                sum_5_reg_215 <= sext_ln9_fu_482_p1;
            elsif (((or_ln14_2_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                sum_5_reg_215 <= sum_4_fu_503_p2;
            end if; 
        end if;
    end process;

    sum_7_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln14_3_fu_509_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                sum_7_reg_225 <= ap_phi_mux_sum_5_phi_fu_218_p4;
            elsif (((or_ln14_3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                sum_7_reg_225 <= sum_6_fu_526_p2;
            end if; 
        end if;
    end process;

    sum_9_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln14_4_fu_537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                sum_9_reg_235 <= sext_ln9_1_fu_533_p1;
            elsif (((or_ln14_4_reg_863 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                sum_9_reg_235 <= sum_8_fu_554_p2;
            end if; 
        end if;
    end process;

    x_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                x_reg_183 <= add_ln12_1_reg_789;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                x_reg_183 <= ap_const_lv31_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln12_1_reg_789 <= add_ln12_1_fu_432_p2;
                gmem_addr_4_reg_810 <= add_ln15_4_fu_462_p2;
                or_ln14_1_reg_806 <= or_ln14_1_fu_457_p2;
                xor_ln14_reg_800 <= xor_ln14_fu_451_p2;
                    zext_ln14_1_reg_794(30 downto 0) <= zext_ln14_1_fu_438_p1(30 downto 0);
                    zext_ln9_reg_783(7 downto 0) <= zext_ln9_fu_428_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln15_1_reg_736 <= add_ln15_1_fu_370_p2;
                add_ln15_2_reg_742 <= add_ln15_2_fu_375_p2;
                add_ln15_reg_730 <= add_ln15_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                add_ln21_reg_898 <= add_ln21_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln7_reg_702 <= add_ln7_fu_313_p2;
                cmp20_reg_707 <= cmp20_fu_323_p2;
                empty_reg_691 <= empty_fu_255_p2;
                rev47_reg_719 <= rev47_fu_344_p2;
                rev_reg_713 <= rev_fu_333_p2;
                trunc_ln7_reg_697 <= trunc_ln7_fu_309_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_55_reg_725 <= empty_55_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                gmem_addr_4_read_reg_816 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                gmem_addr_5_read_reg_837 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                gmem_addr_5_reg_831 <= add_ln15_5_fu_490_p2;
                or_ln14_2_reg_827 <= or_ln14_2_fu_486_p2;
                sext_ln9_reg_821 <= sext_ln9_fu_482_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                gmem_addr_6_read_reg_852 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                gmem_addr_6_reg_846 <= add_ln15_7_fu_513_p2;
                or_ln14_3_reg_842 <= or_ln14_3_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                gmem_addr_7_read_reg_873 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                gmem_addr_7_reg_867 <= add_ln15_8_fu_541_p2;
                or_ln14_4_reg_863 <= or_ln14_4_fu_537_p2;
                sext_ln9_1_reg_857 <= sext_ln9_1_fu_533_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                gmem_addr_8_read_reg_888 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                gmem_addr_8_reg_882 <= add_ln15_10_fu_564_p2;
                or_ln14_5_reg_878 <= or_ln14_5_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                gmem_addr_reg_772 <= add_ln15_3_fu_413_p2;
                icmp_ln14_reg_762 <= icmp_ln14_fu_403_p2;
                or_ln14_reg_768 <= or_ln14_fu_408_p2;
                trunc_ln8_reg_751 <= trunc_ln8_fu_389_p1;
                    zext_ln14_reg_756(30 downto 0) <= zext_ln14_fu_399_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    sext_ln7_1_reg_683(63 downto 1) <= sext_ln7_1_fu_283_p1(63 downto 1);
                sext_ln7_reg_677 <= sext_ln7_fu_271_p1;
                sub2_reg_672 <= sub2_fu_265_p2;
                sub_reg_667 <= sub_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                sum_reg_778 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    sext_ln7_1_reg_683(0) <= '0';
    zext_ln14_reg_756(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln9_reg_783(8) <= '0';
    zext_ln14_1_reg_794(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_0_ARREADY, m_axi_gmem_0_RVALID, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state26, ap_CS_fsm_state34, ap_CS_fsm_state46, ap_CS_fsm_state54, ap_CS_fsm_state56, ap_CS_fsm_state64, ap_CS_fsm_state36, ap_CS_fsm_state44, ap_CS_fsm_state16, ap_CS_fsm_state24, ap_CS_fsm_state2, ap_CS_fsm_state5, or_ln14_fu_408_p2, ap_CS_fsm_state15, or_ln14_1_fu_457_p2, ap_CS_fsm_state25, or_ln14_2_fu_486_p2, or_ln14_3_fu_509_p2, ap_CS_fsm_state35, ap_CS_fsm_state45, or_ln14_4_fu_537_p2, or_ln14_5_fu_560_p2, ap_CS_fsm_state55, icmp_ln8_fu_384_p2, icmp_ln7_fu_299_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln7_fu_299_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln8_fu_384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln8_fu_384_p2 = ap_const_lv1_1) and (or_ln14_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (m_axi_gmem_0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((or_ln14_1_fu_457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_gmem_0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((or_ln14_2_fu_486_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_gmem_0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((or_ln14_3_fu_509_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (m_axi_gmem_0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((or_ln14_4_fu_537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((or_ln14_5_fu_560_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln12_1_fu_432_p2 <= std_logic_vector(unsigned(x_reg_183) + unsigned(ap_const_lv31_1));
    add_ln12_fu_393_p2 <= std_logic_vector(unsigned(x_reg_183) + unsigned(ap_const_lv31_7FFFFFFF));
    add_ln15_10_fu_564_p2 <= std_logic_vector(unsigned(add_ln15_reg_730) + unsigned(zext_ln14_1_reg_794));
    add_ln15_1_fu_370_p2 <= std_logic_vector(signed(sext_ln7_2_fu_354_p1) + signed(input_r));
    add_ln15_2_fu_375_p2 <= std_logic_vector(signed(p_cast7_fu_357_p1) + signed(input_r));
    add_ln15_3_fu_413_p2 <= std_logic_vector(unsigned(add_ln15_2_reg_742) + unsigned(zext_ln14_fu_399_p1));
    add_ln15_4_fu_462_p2 <= std_logic_vector(unsigned(add_ln15_2_reg_742) + unsigned(zext_ln14_1_fu_438_p1));
    add_ln15_5_fu_490_p2 <= std_logic_vector(unsigned(add_ln15_1_reg_736) + unsigned(zext_ln14_reg_756));
    add_ln15_6_fu_360_p2 <= std_logic_vector(signed(p_cast7_fu_357_p1) + signed(sext_ln7_1_reg_683));
    add_ln15_7_fu_513_p2 <= std_logic_vector(unsigned(add_ln15_1_reg_736) + unsigned(zext_ln14_1_reg_794));
    add_ln15_8_fu_541_p2 <= std_logic_vector(unsigned(add_ln15_reg_730) + unsigned(zext_ln14_reg_756));
    add_ln15_fu_365_p2 <= std_logic_vector(unsigned(add_ln15_6_fu_360_p2) + unsigned(input_r));
    add_ln21_fu_583_p2 <= std_logic_vector(unsigned(trunc_ln8_reg_751) + unsigned(trunc_ln7_reg_697));
    add_ln7_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_fu_313_p2),32));
    add_ln7_fu_313_p2 <= std_logic_vector(unsigned(pos_y_fu_76) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;

    ap_ST_fsm_state24_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;

    ap_ST_fsm_state26_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state35_blk <= ap_const_logic_0;

    ap_ST_fsm_state36_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;

    ap_ST_fsm_state44_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state44_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state44_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;

    ap_ST_fsm_state54_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state54_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state54_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state55_blk <= ap_const_logic_0;

    ap_ST_fsm_state56_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state56_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state56_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;

    ap_ST_fsm_state64_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state64_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state64_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_299_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln7_fu_299_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_sum_1_phi_fu_199_p4_assign_proc : process(or_ln14_reg_768, sum_reg_778, ap_CS_fsm_state15, sum_1_reg_195)
    begin
        if (((or_ln14_reg_768 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_phi_mux_sum_1_phi_fu_199_p4 <= sum_reg_778;
        else 
            ap_phi_mux_sum_1_phi_fu_199_p4 <= sum_1_reg_195;
        end if; 
    end process;


    ap_phi_mux_sum_3_phi_fu_209_p4_assign_proc : process(or_ln14_1_reg_806, ap_CS_fsm_state25, sum_2_fu_476_p2, sum_3_reg_206)
    begin
        if (((or_ln14_1_reg_806 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_phi_mux_sum_3_phi_fu_209_p4 <= sum_2_fu_476_p2;
        else 
            ap_phi_mux_sum_3_phi_fu_209_p4 <= sum_3_reg_206;
        end if; 
    end process;


    ap_phi_mux_sum_5_phi_fu_218_p4_assign_proc : process(or_ln14_2_reg_827, ap_CS_fsm_state35, sum_4_fu_503_p2, sum_5_reg_215)
    begin
        if (((or_ln14_2_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_phi_mux_sum_5_phi_fu_218_p4 <= sum_4_fu_503_p2;
        else 
            ap_phi_mux_sum_5_phi_fu_218_p4 <= sum_5_reg_215;
        end if; 
    end process;


    ap_phi_mux_sum_7_phi_fu_228_p4_assign_proc : process(or_ln14_3_reg_842, ap_CS_fsm_state45, sum_6_fu_526_p2, sum_7_reg_225)
    begin
        if (((or_ln14_3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ap_phi_mux_sum_7_phi_fu_228_p4 <= sum_6_fu_526_p2;
        else 
            ap_phi_mux_sum_7_phi_fu_228_p4 <= sum_7_reg_225;
        end if; 
    end process;


    ap_phi_mux_sum_9_phi_fu_238_p4_assign_proc : process(or_ln14_4_reg_863, ap_CS_fsm_state55, sum_8_fu_554_p2, sum_9_reg_235)
    begin
        if (((or_ln14_4_reg_863 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            ap_phi_mux_sum_9_phi_fu_238_p4 <= sum_8_fu_554_p2;
        else 
            ap_phi_mux_sum_9_phi_fu_238_p4 <= sum_9_reg_235;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_299_p2)
    begin
        if (((icmp_ln7_fu_299_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp20_fu_323_p2 <= "1" when (signed(zext_ln7_fu_295_p1) > signed(img_height)) else "0";
    empty_55_fu_350_p2 <= std_logic_vector(signed(empty_reg_691) - signed(sext_ln7_reg_677));
    empty_fu_255_p0 <= sext_ln7_reg_677(32 - 1 downto 0);
    empty_fu_255_p1 <= empty_fu_255_p10(31 - 1 downto 0);
    empty_fu_255_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_y_fu_76),63));

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state6, ap_CS_fsm_state26, ap_CS_fsm_state46, ap_CS_fsm_state56, ap_CS_fsm_state36, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_blk_n_AR <= m_axi_gmem_0_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_state14, ap_CS_fsm_state34, ap_CS_fsm_state54, ap_CS_fsm_state64, ap_CS_fsm_state44, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            gmem_blk_n_R <= m_axi_gmem_0_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln14_1_fu_446_p1 <= img_width;
    icmp_ln14_1_fu_446_p2 <= "1" when (signed(zext_ln14_2_fu_442_p1) < signed(icmp_ln14_1_fu_446_p1)) else "0";
    icmp_ln14_fu_403_p1 <= img_width;
    icmp_ln14_fu_403_p2 <= "1" when (signed(zext_ln8_fu_380_p1) > signed(icmp_ln14_fu_403_p1)) else "0";
    icmp_ln20_fu_617_p2 <= "0" when (tmp_5_fu_607_p4 = ap_const_lv2_0) else "1";
    icmp_ln7_fu_299_p2 <= "1" when (signed(zext_ln7_fu_295_p1) < signed(sub_reg_667)) else "0";
    icmp_ln8_fu_384_p2 <= "1" when (signed(zext_ln8_fu_380_p1) < signed(sub2_reg_672)) else "0";

    m_axi_gmem_0_ARADDR_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state6, ap_CS_fsm_state26, ap_CS_fsm_state46, ap_CS_fsm_state56, ap_CS_fsm_state36, ap_CS_fsm_state16, gmem_addr_reg_772, gmem_addr_4_reg_810, gmem_addr_5_reg_831, gmem_addr_6_reg_846, gmem_addr_7_reg_867, gmem_addr_8_reg_882)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_8_reg_882;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_7_reg_867;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_6_reg_846;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_5_reg_831;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_4_reg_810;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_reg_772;
            else 
                m_axi_gmem_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_ARID <= ap_const_lv1_0;
    m_axi_gmem_0_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_gmem_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_0_ARVALID_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state6, ap_CS_fsm_state26, ap_CS_fsm_state46, ap_CS_fsm_state56, ap_CS_fsm_state36, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_gmem_0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (m_axi_gmem_0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_gmem_0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (m_axi_gmem_0_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem_0_BREADY <= ap_const_logic_0;

    m_axi_gmem_0_RREADY_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_state14, ap_CS_fsm_state34, ap_CS_fsm_state54, ap_CS_fsm_state64, ap_CS_fsm_state44, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_gmem_0_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_WDATA <= ap_const_lv8_0;
    m_axi_gmem_0_WID <= ap_const_lv1_0;
    m_axi_gmem_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_0_WSTRB <= ap_const_lv1_0;
    m_axi_gmem_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem_0_WVALID <= ap_const_logic_0;
    or_ln14_1_fu_457_p2 <= (xor_ln14_fu_451_p2 or cmp20_reg_707);
    or_ln14_2_fu_486_p2 <= (rev_reg_713 or icmp_ln14_reg_762);
    or_ln14_3_fu_509_p2 <= (xor_ln14_reg_800 or rev_reg_713);
    or_ln14_4_fu_537_p2 <= (rev47_reg_719 or icmp_ln14_reg_762);
    or_ln14_5_fu_560_p2 <= (xor_ln14_reg_800 or rev47_reg_719);
    or_ln14_fu_408_p2 <= (icmp_ln14_fu_403_p2 or cmp20_reg_707);
    output_r_address0 <= zext_ln21_fu_636_p1(22 - 1 downto 0);
    output_r_ce0 <= output_r_ce0_local;

    output_r_ce0_local_assign_proc : process(ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            output_r_ce0_local <= ap_const_logic_1;
        else 
            output_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= select_ln21_fu_627_p3;
    output_r_we0 <= output_r_we0_local;

    output_r_we0_local_assign_proc : process(ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            output_r_we0_local <= ap_const_logic_1;
        else 
            output_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;

        p_cast7_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_55_reg_725),64));

    rev47_fu_344_p2 <= (slt46_fu_339_p2 xor ap_const_lv1_1);
    rev_fu_333_p2 <= (slt_fu_328_p2 xor ap_const_lv1_1);
    select_ln21_fu_627_p3 <= 
        ap_const_lv8_FF when (icmp_ln20_fu_617_p2(0) = '1') else 
        trunc_ln21_fu_623_p1;
        sext_ln7_1_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_275_p3),64));

        sext_ln7_2_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_reg_691),64));

    sext_ln7_fu_271_p0 <= img_width;
        sext_ln7_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln7_fu_271_p0),63));

        sext_ln9_1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_sum_7_phi_fu_228_p4),11));

        sext_ln9_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_sum_3_phi_fu_209_p4),10));

    slt46_fu_339_p2 <= "1" when (signed(add_ln7_cast_fu_319_p1) < signed(img_height)) else "0";
    slt_fu_328_p2 <= "1" when (signed(zext_ln7_fu_295_p1) < signed(img_height)) else "0";
    sub2_fu_265_p0 <= img_width;
    sub2_fu_265_p2 <= std_logic_vector(signed(sub2_fu_265_p0) + signed(ap_const_lv32_FFFFFFFF));
    sub_fu_259_p2 <= std_logic_vector(unsigned(img_height) + unsigned(ap_const_lv32_FFFFFFFF));
    sum_10_fu_577_p2 <= std_logic_vector(unsigned(sum_9_reg_235) - unsigned(zext_ln15_4_fu_574_p1));
    sum_12_fu_599_p3 <= 
        ap_const_lv10_0 when (tmp_4_fu_591_p3(0) = '1') else 
        trunc_ln9_fu_587_p1;
    sum_2_fu_476_p2 <= std_logic_vector(unsigned(zext_ln9_reg_783) - unsigned(zext_ln15_fu_473_p1));
    sum_4_fu_503_p2 <= std_logic_vector(signed(sext_ln9_reg_821) + signed(zext_ln15_1_fu_500_p1));
    sum_6_fu_526_p2 <= std_logic_vector(unsigned(sum_5_reg_215) - unsigned(zext_ln15_2_fu_523_p1));
    sum_8_fu_554_p2 <= std_logic_vector(signed(sext_ln9_1_reg_857) + signed(zext_ln15_3_fu_551_p1));
    tmp_4_fu_591_p3 <= sum_11_reg_245(10 downto 10);
    tmp_5_fu_607_p4 <= sum_12_fu_599_p3(9 downto 8);
    tmp_fu_275_p1 <= img_width;
    tmp_fu_275_p3 <= (tmp_fu_275_p1 & ap_const_lv1_0);
    trunc_ln21_fu_623_p1 <= sum_12_fu_599_p3(8 - 1 downto 0);
    trunc_ln7_fu_309_p1 <= empty_fu_255_p2(22 - 1 downto 0);
    trunc_ln8_fu_389_p1 <= x_reg_183(22 - 1 downto 0);
    trunc_ln9_fu_587_p1 <= sum_11_reg_245(10 - 1 downto 0);
    xor_ln14_fu_451_p2 <= (icmp_ln14_1_fu_446_p2 xor ap_const_lv1_1);
    zext_ln14_1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_1_fu_432_p2),64));
    zext_ln14_2_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_1_fu_432_p2),32));
    zext_ln14_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_fu_393_p2),64));
    zext_ln15_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_addr_5_read_reg_837),10));
    zext_ln15_2_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_addr_6_read_reg_852),10));
    zext_ln15_3_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_addr_7_read_reg_873),11));
    zext_ln15_4_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_addr_8_read_reg_888),11));
    zext_ln15_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_addr_4_read_reg_816),9));
    zext_ln21_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_reg_898),64));
    zext_ln7_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_y_fu_76),32));
    zext_ln8_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_183),32));
    zext_ln9_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_sum_1_phi_fu_199_p4),9));
end behav;
