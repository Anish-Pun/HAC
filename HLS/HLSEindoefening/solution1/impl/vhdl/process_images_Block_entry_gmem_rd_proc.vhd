-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_images_Block_entry_gmem_rd_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    conv_result_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    conv_result_ce0 : OUT STD_LOGIC;
    conv_result_we0 : OUT STD_LOGIC;
    conv_result_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_height : IN STD_LOGIC_VECTOR (31 downto 0);
    img_width : IN STD_LOGIC_VECTOR (31 downto 0);
    max_result_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    max_result_ce0 : OUT STD_LOGIC;
    max_result_we0 : OUT STD_LOGIC;
    max_result_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    min_result_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    min_result_ce0 : OUT STD_LOGIC;
    min_result_we0 : OUT STD_LOGIC;
    min_result_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    avg_result_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    avg_result_ce0 : OUT STD_LOGIC;
    avg_result_we0 : OUT STD_LOGIC;
    avg_result_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of process_images_Block_entry_gmem_rd_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_width_read_reg_109 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal img_height_read_reg_117 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_read_reg_125 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_convolution_1_1_fu_62_ap_start : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_ap_done : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_ap_idle : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_ap_ready : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWVALID : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_WVALID : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_WLAST : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARVALID : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_RREADY : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_m_axi_gmem_0_BREADY : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_output_r_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_convolution_1_1_fu_62_output_r_ce0 : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_output_r_we0 : STD_LOGIC;
    signal grp_convolution_1_1_fu_62_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pooling_1_1_fu_76_ap_start : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_ap_done : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_ap_idle : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_ap_ready : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWVALID : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_WVALID : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_WLAST : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARVALID : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_RREADY : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_m_axi_gmem_0_BREADY : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_output_r_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_pooling_1_1_fu_76_output_r_ce0 : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_output_r_we0 : STD_LOGIC;
    signal grp_pooling_1_1_fu_76_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pooling_2_1_fu_87_ap_start : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_ap_done : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_ap_idle : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_ap_ready : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWVALID : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_WVALID : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_WLAST : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARVALID : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_RREADY : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_m_axi_gmem_0_BREADY : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_output_r_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_pooling_2_1_fu_87_output_r_ce0 : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_output_r_we0 : STD_LOGIC;
    signal grp_pooling_2_1_fu_87_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pooling_1_2_fu_98_ap_start : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_ap_done : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_ap_idle : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_ap_ready : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWVALID : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_WVALID : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_WLAST : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARVALID : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_RREADY : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_m_axi_gmem_0_BREADY : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_output_r_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_pooling_1_2_fu_98_output_r_ce0 : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_output_r_we0 : STD_LOGIC;
    signal grp_pooling_1_2_fu_98_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_1_1_fu_62_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call4 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_pooling_1_1_fu_76_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_pooling_2_1_fu_87_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_pooling_1_2_fu_98_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component process_images_convolution_1_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem_0_WREADY : IN STD_LOGIC;
        m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RVALID : IN STD_LOGIC;
        m_axi_gmem_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_RLAST : IN STD_LOGIC;
        m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BVALID : IN STD_LOGIC;
        m_axi_gmem_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_height : IN STD_LOGIC_VECTOR (31 downto 0);
        img_width : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component process_images_pooling_1_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem_0_WREADY : IN STD_LOGIC;
        m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RVALID : IN STD_LOGIC;
        m_axi_gmem_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_RLAST : IN STD_LOGIC;
        m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BVALID : IN STD_LOGIC;
        m_axi_gmem_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_height : IN STD_LOGIC_VECTOR (31 downto 0);
        img_width : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component process_images_pooling_2_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem_0_WREADY : IN STD_LOGIC;
        m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RVALID : IN STD_LOGIC;
        m_axi_gmem_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_RLAST : IN STD_LOGIC;
        m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BVALID : IN STD_LOGIC;
        m_axi_gmem_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_height : IN STD_LOGIC_VECTOR (31 downto 0);
        img_width : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component process_images_pooling_1_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem_0_WREADY : IN STD_LOGIC;
        m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RVALID : IN STD_LOGIC;
        m_axi_gmem_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_RLAST : IN STD_LOGIC;
        m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BVALID : IN STD_LOGIC;
        m_axi_gmem_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_height : IN STD_LOGIC_VECTOR (31 downto 0);
        img_width : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_convolution_1_1_fu_62 : component process_images_convolution_1_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_1_1_fu_62_ap_start,
        ap_done => grp_convolution_1_1_fu_62_ap_done,
        ap_idle => grp_convolution_1_1_fu_62_ap_idle,
        ap_ready => grp_convolution_1_1_fu_62_ap_ready,
        m_axi_gmem_0_AWVALID => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY => ap_const_logic_0,
        m_axi_gmem_0_AWADDR => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER => grp_convolution_1_1_fu_62_m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID => grp_convolution_1_1_fu_62_m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY => ap_const_logic_0,
        m_axi_gmem_0_WDATA => grp_convolution_1_1_fu_62_m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB => grp_convolution_1_1_fu_62_m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST => grp_convolution_1_1_fu_62_m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID => grp_convolution_1_1_fu_62_m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER => grp_convolution_1_1_fu_62_m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY => m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER => grp_convolution_1_1_fu_62_m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID => m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY => grp_convolution_1_1_fu_62_m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA => m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST => m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID => m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM => m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER => m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP => m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID => ap_const_logic_0,
        m_axi_gmem_0_BREADY => grp_convolution_1_1_fu_62_m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP => ap_const_lv2_0,
        m_axi_gmem_0_BID => ap_const_lv1_0,
        m_axi_gmem_0_BUSER => ap_const_lv1_0,
        input_r => input_r_read_reg_125,
        output_r_address0 => grp_convolution_1_1_fu_62_output_r_address0,
        output_r_ce0 => grp_convolution_1_1_fu_62_output_r_ce0,
        output_r_we0 => grp_convolution_1_1_fu_62_output_r_we0,
        output_r_d0 => grp_convolution_1_1_fu_62_output_r_d0,
        img_height => img_height_read_reg_117,
        img_width => img_width_read_reg_109);

    grp_pooling_1_1_fu_76 : component process_images_pooling_1_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pooling_1_1_fu_76_ap_start,
        ap_done => grp_pooling_1_1_fu_76_ap_done,
        ap_idle => grp_pooling_1_1_fu_76_ap_idle,
        ap_ready => grp_pooling_1_1_fu_76_ap_ready,
        m_axi_gmem_0_AWVALID => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY => ap_const_logic_0,
        m_axi_gmem_0_AWADDR => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER => grp_pooling_1_1_fu_76_m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID => grp_pooling_1_1_fu_76_m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY => ap_const_logic_0,
        m_axi_gmem_0_WDATA => grp_pooling_1_1_fu_76_m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB => grp_pooling_1_1_fu_76_m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST => grp_pooling_1_1_fu_76_m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID => grp_pooling_1_1_fu_76_m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER => grp_pooling_1_1_fu_76_m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY => m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER => grp_pooling_1_1_fu_76_m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID => m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY => grp_pooling_1_1_fu_76_m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA => m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST => m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID => m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM => m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER => m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP => m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID => ap_const_logic_0,
        m_axi_gmem_0_BREADY => grp_pooling_1_1_fu_76_m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP => ap_const_lv2_0,
        m_axi_gmem_0_BID => ap_const_lv1_0,
        m_axi_gmem_0_BUSER => ap_const_lv1_0,
        input_r => input_r_read_reg_125,
        output_r_address0 => grp_pooling_1_1_fu_76_output_r_address0,
        output_r_ce0 => grp_pooling_1_1_fu_76_output_r_ce0,
        output_r_we0 => grp_pooling_1_1_fu_76_output_r_we0,
        output_r_d0 => grp_pooling_1_1_fu_76_output_r_d0,
        img_height => img_height_read_reg_117,
        img_width => img_width_read_reg_109);

    grp_pooling_2_1_fu_87 : component process_images_pooling_2_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pooling_2_1_fu_87_ap_start,
        ap_done => grp_pooling_2_1_fu_87_ap_done,
        ap_idle => grp_pooling_2_1_fu_87_ap_idle,
        ap_ready => grp_pooling_2_1_fu_87_ap_ready,
        m_axi_gmem_0_AWVALID => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY => ap_const_logic_0,
        m_axi_gmem_0_AWADDR => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER => grp_pooling_2_1_fu_87_m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID => grp_pooling_2_1_fu_87_m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY => ap_const_logic_0,
        m_axi_gmem_0_WDATA => grp_pooling_2_1_fu_87_m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB => grp_pooling_2_1_fu_87_m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST => grp_pooling_2_1_fu_87_m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID => grp_pooling_2_1_fu_87_m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER => grp_pooling_2_1_fu_87_m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY => m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER => grp_pooling_2_1_fu_87_m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID => m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY => grp_pooling_2_1_fu_87_m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA => m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST => m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID => m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM => m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER => m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP => m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID => ap_const_logic_0,
        m_axi_gmem_0_BREADY => grp_pooling_2_1_fu_87_m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP => ap_const_lv2_0,
        m_axi_gmem_0_BID => ap_const_lv1_0,
        m_axi_gmem_0_BUSER => ap_const_lv1_0,
        input_r => input_r_read_reg_125,
        output_r_address0 => grp_pooling_2_1_fu_87_output_r_address0,
        output_r_ce0 => grp_pooling_2_1_fu_87_output_r_ce0,
        output_r_we0 => grp_pooling_2_1_fu_87_output_r_we0,
        output_r_d0 => grp_pooling_2_1_fu_87_output_r_d0,
        img_height => img_height_read_reg_117,
        img_width => img_width_read_reg_109);

    grp_pooling_1_2_fu_98 : component process_images_pooling_1_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pooling_1_2_fu_98_ap_start,
        ap_done => grp_pooling_1_2_fu_98_ap_done,
        ap_idle => grp_pooling_1_2_fu_98_ap_idle,
        ap_ready => grp_pooling_1_2_fu_98_ap_ready,
        m_axi_gmem_0_AWVALID => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY => ap_const_logic_0,
        m_axi_gmem_0_AWADDR => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER => grp_pooling_1_2_fu_98_m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID => grp_pooling_1_2_fu_98_m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY => ap_const_logic_0,
        m_axi_gmem_0_WDATA => grp_pooling_1_2_fu_98_m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB => grp_pooling_1_2_fu_98_m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST => grp_pooling_1_2_fu_98_m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID => grp_pooling_1_2_fu_98_m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER => grp_pooling_1_2_fu_98_m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY => m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER => grp_pooling_1_2_fu_98_m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID => m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY => grp_pooling_1_2_fu_98_m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA => m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST => m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID => m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM => m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER => m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP => m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID => ap_const_logic_0,
        m_axi_gmem_0_BREADY => grp_pooling_1_2_fu_98_m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP => ap_const_lv2_0,
        m_axi_gmem_0_BID => ap_const_lv1_0,
        m_axi_gmem_0_BUSER => ap_const_lv1_0,
        input_r => input_r_read_reg_125,
        output_r_address0 => grp_pooling_1_2_fu_98_output_r_address0,
        output_r_ce0 => grp_pooling_1_2_fu_98_output_r_ce0,
        output_r_we0 => grp_pooling_1_2_fu_98_output_r_we0,
        output_r_d0 => grp_pooling_1_2_fu_98_output_r_d0,
        img_height => img_height_read_reg_117,
        img_width => img_width_read_reg_109);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_pooling_1_2_fu_98_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_1_1_fu_62_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_1_1_fu_62_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_ignore_call4))) then 
                    grp_convolution_1_1_fu_62_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_1_1_fu_62_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_1_1_fu_62_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pooling_1_1_fu_76_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pooling_1_1_fu_76_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_pooling_1_1_fu_76_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pooling_1_1_fu_76_ap_ready = ap_const_logic_1)) then 
                    grp_pooling_1_1_fu_76_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pooling_1_2_fu_98_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pooling_1_2_fu_98_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_pooling_1_2_fu_98_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pooling_1_2_fu_98_ap_ready = ap_const_logic_1)) then 
                    grp_pooling_1_2_fu_98_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pooling_2_1_fu_87_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pooling_2_1_fu_87_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_pooling_2_1_fu_87_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pooling_2_1_fu_87_ap_ready = ap_const_logic_1)) then 
                    grp_pooling_2_1_fu_87_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                img_height_read_reg_117 <= img_height;
                img_width_read_reg_109 <= img_width;
                input_r_read_reg_125 <= input_r;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_convolution_1_1_fu_62_ap_done, grp_pooling_1_1_fu_76_ap_done, grp_pooling_2_1_fu_87_ap_done, grp_pooling_1_2_fu_98_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_convolution_1_1_fu_62_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_pooling_1_1_fu_76_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_pooling_2_1_fu_87_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_pooling_1_2_fu_98_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_convolution_1_1_fu_62_ap_done)
    begin
        if ((grp_convolution_1_1_fu_62_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_pooling_1_1_fu_76_ap_done)
    begin
        if ((grp_pooling_1_1_fu_76_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_pooling_2_1_fu_87_ap_done)
    begin
        if ((grp_pooling_2_1_fu_87_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_pooling_1_2_fu_98_ap_done)
    begin
        if ((grp_pooling_1_2_fu_98_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call4_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call4 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_pooling_1_2_fu_98_ap_done, ap_CS_fsm_state8)
    begin
        if (((grp_pooling_1_2_fu_98_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_pooling_1_2_fu_98_ap_done, ap_CS_fsm_state8)
    begin
        if (((grp_pooling_1_2_fu_98_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    avg_result_address0 <= grp_pooling_1_2_fu_98_output_r_address0;
    avg_result_ce0 <= grp_pooling_1_2_fu_98_output_r_ce0;
    avg_result_d0 <= grp_pooling_1_2_fu_98_output_r_d0;
    avg_result_we0 <= grp_pooling_1_2_fu_98_output_r_we0;
    conv_result_address0 <= grp_convolution_1_1_fu_62_output_r_address0;
    conv_result_ce0 <= grp_convolution_1_1_fu_62_output_r_ce0;
    conv_result_d0 <= grp_convolution_1_1_fu_62_output_r_d0;
    conv_result_we0 <= grp_convolution_1_1_fu_62_output_r_we0;
    grp_convolution_1_1_fu_62_ap_start <= grp_convolution_1_1_fu_62_ap_start_reg;
    grp_pooling_1_1_fu_76_ap_start <= grp_pooling_1_1_fu_76_ap_start_reg;
    grp_pooling_1_2_fu_98_ap_start <= grp_pooling_1_2_fu_98_ap_start_reg;
    grp_pooling_2_1_fu_87_ap_start <= grp_pooling_2_1_fu_87_ap_start_reg;

    m_axi_gmem_0_ARADDR_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARADDR, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARADDR, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARADDR, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARADDR, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARADDR <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARADDR <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARADDR <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARADDR <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARADDR;
        else 
            m_axi_gmem_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_0_ARBURST_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARBURST, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARBURST, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARBURST, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARBURST, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARBURST <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARBURST <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARBURST <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARBURST <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARBURST;
        else 
            m_axi_gmem_0_ARBURST <= "XX";
        end if; 
    end process;


    m_axi_gmem_0_ARCACHE_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARCACHE, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARCACHE, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARCACHE, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARCACHE, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARCACHE <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARCACHE <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARCACHE <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARCACHE <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARCACHE;
        else 
            m_axi_gmem_0_ARCACHE <= "XXXX";
        end if; 
    end process;


    m_axi_gmem_0_ARID_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARID, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARID, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARID, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARID <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARID <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARID <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARID <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARID;
        else 
            m_axi_gmem_0_ARID <= "X";
        end if; 
    end process;


    m_axi_gmem_0_ARLEN_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARLEN, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARLEN, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARLEN, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARLEN, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARLEN <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARLEN <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARLEN <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARLEN <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARLEN;
        else 
            m_axi_gmem_0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_0_ARLOCK_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARLOCK, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARLOCK, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARLOCK, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARLOCK, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARLOCK <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARLOCK <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARLOCK <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARLOCK <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARLOCK;
        else 
            m_axi_gmem_0_ARLOCK <= "XX";
        end if; 
    end process;


    m_axi_gmem_0_ARPROT_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARPROT, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARPROT, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARPROT, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARPROT, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARPROT <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARPROT <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARPROT <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARPROT <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARPROT;
        else 
            m_axi_gmem_0_ARPROT <= "XXX";
        end if; 
    end process;


    m_axi_gmem_0_ARQOS_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARQOS, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARQOS, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARQOS, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARQOS, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARQOS <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARQOS <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARQOS <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARQOS <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARQOS;
        else 
            m_axi_gmem_0_ARQOS <= "XXXX";
        end if; 
    end process;


    m_axi_gmem_0_ARREGION_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARREGION, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARREGION, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARREGION, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARREGION, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARREGION <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARREGION <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARREGION <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARREGION <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARREGION;
        else 
            m_axi_gmem_0_ARREGION <= "XXXX";
        end if; 
    end process;


    m_axi_gmem_0_ARSIZE_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARSIZE, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARSIZE, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARSIZE, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARSIZE, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARSIZE <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARSIZE <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARSIZE <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARSIZE <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARSIZE;
        else 
            m_axi_gmem_0_ARSIZE <= "XXX";
        end if; 
    end process;


    m_axi_gmem_0_ARUSER_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARUSER, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARUSER, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARUSER, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARUSER, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARUSER <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARUSER <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARUSER <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARUSER <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARUSER;
        else 
            m_axi_gmem_0_ARUSER <= "X";
        end if; 
    end process;


    m_axi_gmem_0_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_ARVALID, grp_pooling_1_1_fu_76_m_axi_gmem_0_ARVALID, grp_pooling_2_1_fu_87_m_axi_gmem_0_ARVALID, grp_pooling_1_2_fu_98_m_axi_gmem_0_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_ARVALID <= grp_pooling_1_2_fu_98_m_axi_gmem_0_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_ARVALID <= grp_pooling_2_1_fu_87_m_axi_gmem_0_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_ARVALID <= grp_pooling_1_1_fu_76_m_axi_gmem_0_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_ARVALID <= grp_convolution_1_1_fu_62_m_axi_gmem_0_ARVALID;
        else 
            m_axi_gmem_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem_0_BREADY <= ap_const_logic_0;

    m_axi_gmem_0_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_convolution_1_1_fu_62_m_axi_gmem_0_RREADY, grp_pooling_1_1_fu_76_m_axi_gmem_0_RREADY, grp_pooling_2_1_fu_87_m_axi_gmem_0_RREADY, grp_pooling_1_2_fu_98_m_axi_gmem_0_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_0_RREADY <= grp_pooling_1_2_fu_98_m_axi_gmem_0_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_0_RREADY <= grp_pooling_2_1_fu_87_m_axi_gmem_0_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_0_RREADY <= grp_pooling_1_1_fu_76_m_axi_gmem_0_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_0_RREADY <= grp_convolution_1_1_fu_62_m_axi_gmem_0_RREADY;
        else 
            m_axi_gmem_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_WDATA <= ap_const_lv8_0;
    m_axi_gmem_0_WID <= ap_const_lv1_0;
    m_axi_gmem_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_0_WSTRB <= ap_const_lv1_0;
    m_axi_gmem_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem_0_WVALID <= ap_const_logic_0;
    max_result_address0 <= grp_pooling_1_1_fu_76_output_r_address0;
    max_result_ce0 <= grp_pooling_1_1_fu_76_output_r_ce0;
    max_result_d0 <= grp_pooling_1_1_fu_76_output_r_d0;
    max_result_we0 <= grp_pooling_1_1_fu_76_output_r_we0;
    min_result_address0 <= grp_pooling_2_1_fu_87_output_r_address0;
    min_result_ce0 <= grp_pooling_2_1_fu_87_output_r_ce0;
    min_result_d0 <= grp_pooling_2_1_fu_87_output_r_d0;
    min_result_we0 <= grp_pooling_2_1_fu_87_output_r_we0;
end behav;
