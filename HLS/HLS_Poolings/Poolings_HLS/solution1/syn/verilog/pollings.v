// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pollings_pollings,hls_ip_2024_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=4116,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2133,HLS_SYN_LUT=2504,HLS_VERSION=2024_1}" *)

module pollings (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_ready;
wire    ap_CS_fsm_pp0_stage3;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
wire   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [7:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire   [10:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg    ap_block_state12_pp0_stage3_iter2;
reg    ap_block_state16_io;
reg    ap_block_pp0_stage3_subdone;
wire   [0:0] icmp_ln24_fu_439_p2;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] in_img;
wire   [63:0] max_pool;
wire   [63:0] min_pool;
wire   [63:0] avg_pool;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg   [0:0] icmp_ln258_reg_222;
reg   [63:0] avg_pool_read_reg_590;
reg    ap_block_state13_pp0_stage0_iter3;
reg    ap_block_state17_io;
reg    ap_block_state21_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] min_pool_read_reg_595;
reg   [63:0] max_pool_read_reg_600;
reg   [63:0] in_img_read_reg_605;
wire   [5:0] select_ln24_fu_256_p3;
reg   [5:0] select_ln24_reg_610;
reg   [63:0] gmem_addr_reg_617;
reg    ap_block_state14_pp0_stage1_iter3;
reg    ap_block_state22_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] gmem_addr_1_reg_623;
reg   [63:0] gmem_addr_2_reg_629;
reg   [63:0] gmem_addr_2_reg_629_pp0_iter1_reg;
reg   [63:0] gmem_addr_2_reg_629_pp0_iter2_reg;
reg   [63:0] gmem_addr_2_reg_629_pp0_iter3_reg;
reg   [63:0] gmem_addr_3_reg_635;
reg   [63:0] gmem_addr_3_reg_635_pp0_iter1_reg;
reg   [63:0] gmem_addr_3_reg_635_pp0_iter2_reg;
reg   [63:0] gmem_addr_3_reg_635_pp0_iter3_reg;
reg   [63:0] gmem_addr_4_reg_641;
reg   [63:0] gmem_addr_4_reg_641_pp0_iter1_reg;
reg   [63:0] gmem_addr_4_reg_641_pp0_iter2_reg;
reg   [63:0] gmem_addr_4_reg_641_pp0_iter3_reg;
wire   [0:0] icmp_ln25_fu_403_p2;
reg   [0:0] icmp_ln25_reg_647;
reg   [0:0] icmp_ln24_reg_652;
reg    ap_block_pp0_stage3_11001;
reg   [0:0] icmp_ln24_reg_652_pp0_iter1_reg;
reg   [0:0] icmp_ln24_reg_652_pp0_iter2_reg;
reg   [0:0] icmp_ln24_reg_652_pp0_iter3_reg;
reg   [0:0] icmp_ln24_reg_652_pp0_iter4_reg;
reg   [7:0] val_reg_656;
reg    ap_block_state11_pp0_stage2_iter2;
reg    ap_block_state23_pp0_stage2_iter5;
reg    ap_block_pp0_stage2_11001;
reg   [7:0] val_1_reg_665;
reg   [7:0] val_2_reg_674;
wire   [7:0] max_val_1_fu_454_p3;
reg   [7:0] max_val_1_reg_683;
reg   [7:0] val_3_reg_689;
wire   [7:0] min_val_2_fu_491_p3;
reg   [7:0] min_val_2_reg_698;
wire   [7:0] max_val_5_fu_506_p3;
reg   [7:0] max_val_5_reg_704;
reg   [7:0] trunc_ln_reg_709;
wire   [7:0] min_val_3_fu_556_p3;
reg   [7:0] min_val_3_reg_714;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage2_subdone;
reg   [0:0] ap_phi_mux_icmp_ln258_phi_fu_225_p4;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] empty_20_fu_347_p2;
wire   [63:0] empty_19_fu_341_p2;
wire   [63:0] add_ln39_fu_365_p2;
wire   [63:0] add_ln40_fu_376_p2;
wire   [63:0] add_ln41_fu_387_p2;
reg    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
reg   [9:0] indvar_flatten5_fu_110;
wire   [9:0] add_ln24_1_fu_433_p2;
reg   [5:0] i6_fu_114;
wire   [5:0] i_fu_270_p3;
reg   [5:0] j7_fu_118;
wire   [5:0] j_fu_398_p2;
reg   [5:0] ap_sig_allocacmp_j7_load;
reg   [5:0] add_ln249_fu_122;
wire   [5:0] add_ln24_fu_409_p2;
wire   [4:0] empty_fu_278_p1;
wire   [11:0] tmp_4_fu_290_p3;
wire   [11:0] tmp_5_fu_302_p3;
wire   [9:0] zext_ln25_1_fu_314_p1;
wire   [9:0] tmp_2_fu_282_p3;
wire   [9:0] empty_17_fu_317_p2;
wire   [5:0] empty_18_fu_327_p2;
wire   [63:0] p_cast7_fu_332_p1;
wire   [63:0] tmp_fu_336_p2;
wire   [63:0] zext_ln25_fu_310_p1;
wire   [63:0] p_cast_fu_298_p1;
wire   [63:0] p_cast6_fu_323_p1;
wire   [0:0] icmp_ln34_fu_450_p2;
wire   [0:0] icmp_ln35_fu_463_p2;
wire   [0:0] icmp_ln34_1_fu_476_p2;
wire   [7:0] min_val_1_fu_467_p3;
wire   [0:0] icmp_ln35_1_fu_486_p2;
wire   [7:0] max_val_3_fu_480_p3;
wire   [0:0] icmp_ln34_2_fu_501_p2;
wire   [8:0] zext_ln27_fu_473_p1;
wire   [8:0] zext_ln29_fu_460_p1;
wire   [8:0] add_ln36_fu_516_p2;
wire   [8:0] zext_ln27_1_fu_498_p1;
wire   [8:0] zext_ln36_fu_513_p1;
wire   [8:0] add_ln36_1_fu_526_p2;
wire   [9:0] zext_ln36_2_fu_532_p1;
wire   [9:0] zext_ln36_1_fu_522_p1;
wire   [9:0] sum_fu_536_p2;
wire   [0:0] icmp_ln35_2_fu_552_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter5_stage2;
reg    ap_idle_pp0_0to4;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
reg    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_769;
reg    ap_condition_773;
reg    ap_condition_777;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 indvar_flatten5_fu_110 = 10'd0;
#0 i6_fu_114 = 6'd0;
#0 j7_fu_118 = 6'd0;
#0 add_ln249_fu_122 = 6'd0;
#0 ap_done_reg = 1'b0;
end

pollings_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .in_img(in_img),
    .max_pool(max_pool),
    .min_pool(min_pool),
    .avg_pool(avg_pool),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

pollings_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 11 ),
    .CH0_USER_DW( 8 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(gmem_ARVALID),
    .I_CH0_ARREADY(gmem_ARREADY),
    .I_CH0_ARADDR(gmem_ARADDR),
    .I_CH0_ARLEN(gmem_ARLEN),
    .I_CH0_RVALID(gmem_RVALID),
    .I_CH0_RREADY(gmem_RREADY),
    .I_CH0_RDATA(gmem_RDATA),
    .I_CH0_RFIFONUM(gmem_RFIFONUM),
    .I_CH0_AWVALID(gmem_AWVALID),
    .I_CH0_AWREADY(gmem_AWREADY),
    .I_CH0_AWADDR(gmem_AWADDR),
    .I_CH0_AWLEN(gmem_AWLEN),
    .I_CH0_WVALID(gmem_WVALID),
    .I_CH0_WREADY(gmem_WREADY),
    .I_CH0_WDATA(gmem_WDATA),
    .I_CH0_WSTRB(1'd1),
    .I_CH0_BVALID(gmem_BVALID),
    .I_CH0_BREADY(gmem_BREADY)
);

pollings_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_769)) begin
            add_ln249_fu_122 <= 6'd1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            add_ln249_fu_122 <= add_ln24_fu_409_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage2))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage2))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone)) | ((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage2)))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_769)) begin
            i6_fu_114 <= 6'd0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            i6_fu_114 <= i_fu_270_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_777)) begin
            icmp_ln258_reg_222 <= icmp_ln25_reg_647;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            icmp_ln258_reg_222 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_769)) begin
            indvar_flatten5_fu_110 <= 10'd0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            indvar_flatten5_fu_110 <= add_ln24_1_fu_433_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_769)) begin
            j7_fu_118 <= 6'd0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            j7_fu_118 <= j_fu_398_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        avg_pool_read_reg_590 <= avg_pool;
        in_img_read_reg_605 <= in_img;
        max_pool_read_reg_600 <= max_pool;
        min_pool_read_reg_595 <= min_pool;
        select_ln24_reg_610 <= select_ln24_fu_256_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem_addr_1_reg_623 <= empty_19_fu_341_p2;
        gmem_addr_2_reg_629 <= add_ln39_fu_365_p2;
        gmem_addr_2_reg_629_pp0_iter1_reg <= gmem_addr_2_reg_629;
        gmem_addr_2_reg_629_pp0_iter2_reg <= gmem_addr_2_reg_629_pp0_iter1_reg;
        gmem_addr_2_reg_629_pp0_iter3_reg <= gmem_addr_2_reg_629_pp0_iter2_reg;
        gmem_addr_3_reg_635 <= add_ln40_fu_376_p2;
        gmem_addr_3_reg_635_pp0_iter1_reg <= gmem_addr_3_reg_635;
        gmem_addr_3_reg_635_pp0_iter2_reg <= gmem_addr_3_reg_635_pp0_iter1_reg;
        gmem_addr_3_reg_635_pp0_iter3_reg <= gmem_addr_3_reg_635_pp0_iter2_reg;
        gmem_addr_4_reg_641 <= add_ln41_fu_387_p2;
        gmem_addr_4_reg_641_pp0_iter1_reg <= gmem_addr_4_reg_641;
        gmem_addr_4_reg_641_pp0_iter2_reg <= gmem_addr_4_reg_641_pp0_iter1_reg;
        gmem_addr_4_reg_641_pp0_iter3_reg <= gmem_addr_4_reg_641_pp0_iter2_reg;
        gmem_addr_reg_617 <= empty_20_fu_347_p2;
        max_val_1_reg_683 <= max_val_1_fu_454_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        icmp_ln24_reg_652 <= icmp_ln24_fu_439_p2;
        icmp_ln24_reg_652_pp0_iter1_reg <= icmp_ln24_reg_652;
        icmp_ln24_reg_652_pp0_iter2_reg <= icmp_ln24_reg_652_pp0_iter1_reg;
        icmp_ln24_reg_652_pp0_iter3_reg <= icmp_ln24_reg_652_pp0_iter2_reg;
        icmp_ln24_reg_652_pp0_iter4_reg <= icmp_ln24_reg_652_pp0_iter3_reg;
        min_val_3_reg_714 <= min_val_3_fu_556_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln25_reg_647 <= icmp_ln25_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        max_val_5_reg_704 <= max_val_5_fu_506_p3;
        min_val_2_reg_698 <= min_val_2_fu_491_p3;
        trunc_ln_reg_709 <= {{sum_fu_536_p2[9:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        val_1_reg_665 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        val_2_reg_674 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        val_3_reg_689 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        val_reg_656 <= gmem_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln24_fu_439_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln24_reg_652_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_condition_exit_pp0_iter5_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_773)) begin
            ap_phi_mux_icmp_ln258_phi_fu_225_p4 = icmp_ln25_reg_647;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_icmp_ln258_phi_fu_225_p4 = 1'd0;
        end else begin
            ap_phi_mux_icmp_ln258_phi_fu_225_p4 = icmp_ln25_reg_647;
        end
    end else begin
        ap_phi_mux_icmp_ln258_phi_fu_225_p4 = icmp_ln25_reg_647;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j7_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j7_load = j7_fu_118;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_ARADDR = gmem_addr_1_reg_623;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem_ARADDR = gmem_addr_reg_617;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_AWADDR = gmem_addr_4_reg_641_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        gmem_AWADDR = gmem_addr_3_reg_635_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem_AWADDR = gmem_addr_2_reg_629_pp0_iter3_reg;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        gmem_WDATA = trunc_ln_reg_709;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        gmem_WDATA = min_val_3_reg_714;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        gmem_WDATA = max_val_5_reg_704;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_1_fu_433_p2 = (indvar_flatten5_fu_110 + 10'd1);

assign add_ln24_fu_409_p2 = (i_fu_270_p3 + 6'd1);

assign add_ln36_1_fu_526_p2 = (zext_ln27_1_fu_498_p1 + zext_ln36_fu_513_p1);

assign add_ln36_fu_516_p2 = (zext_ln27_fu_473_p1 + zext_ln29_fu_460_p1);

assign add_ln39_fu_365_p2 = (p_cast6_fu_323_p1 + max_pool_read_reg_600);

assign add_ln40_fu_376_p2 = (p_cast6_fu_323_p1 + min_pool_read_reg_595);

assign add_ln41_fu_387_p2 = (p_cast6_fu_323_p1 + avg_pool_read_reg_590);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state21_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state17_io)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state21_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state17_io)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state21_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter3)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state22_pp0_stage1_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage1_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state22_pp0_stage1_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage1_iter3)) | ((gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state22_pp0_stage1_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage1_iter3)) | ((gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state23_pp0_stage2_iter5)) | ((gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage2_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state23_pp0_stage2_iter5)) | ((gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage2_iter2)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage3_iter2));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state16_io)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage3_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state16_io)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage3_iter2)));
end

always @ (*) begin
    ap_block_state11_pp0_stage2_iter2 = (gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage3_iter2 = (gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state13_pp0_stage0_iter3 = (gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state14_pp0_stage1_iter3 = (gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state16_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state17_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state21_pp0_stage0_iter5 = (gmem_BVALID == 1'b0);
end

always @ (*) begin
    ap_block_state22_pp0_stage1_iter5 = (gmem_BVALID == 1'b0);
end

always @ (*) begin
    ap_block_state23_pp0_stage2_iter5 = (gmem_BVALID == 1'b0);
end

always @ (*) begin
    ap_condition_769 = ((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_773 = ((icmp_ln24_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_777 = ((icmp_ln24_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign ap_ready = ap_ready_sig;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_17_fu_317_p2 = (zext_ln25_1_fu_314_p1 + tmp_2_fu_282_p3);

assign empty_18_fu_327_p2 = select_ln24_reg_610 << 6'd1;

assign empty_19_fu_341_p2 = (tmp_fu_336_p2 + zext_ln25_fu_310_p1);

assign empty_20_fu_347_p2 = (tmp_fu_336_p2 + p_cast_fu_298_p1);

assign empty_fu_278_p1 = i_fu_270_p3[4:0];

assign gmem_ARLEN = 64'd2;

assign gmem_AWLEN = 64'd1;

assign i_fu_270_p3 = ((icmp_ln258_reg_222[0:0] == 1'b1) ? add_ln249_fu_122 : i6_fu_114);

assign icmp_ln24_fu_439_p2 = ((indvar_flatten5_fu_110 == 10'd1023) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_403_p2 = ((j_fu_398_p2 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_476_p2 = ((val_2_reg_674 > max_val_1_reg_683) ? 1'b1 : 1'b0);

assign icmp_ln34_2_fu_501_p2 = ((val_3_reg_689 > max_val_3_fu_480_p3) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_450_p2 = ((val_1_reg_665 > val_reg_656) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_486_p2 = ((val_2_reg_674 < min_val_1_fu_467_p3) ? 1'b1 : 1'b0);

assign icmp_ln35_2_fu_552_p2 = ((val_3_reg_689 < min_val_2_reg_698) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_463_p2 = ((val_1_reg_665 < val_reg_656) ? 1'b1 : 1'b0);

assign j_fu_398_p2 = (select_ln24_reg_610 + 6'd1);

assign max_val_1_fu_454_p3 = ((icmp_ln34_fu_450_p2[0:0] == 1'b1) ? val_1_reg_665 : val_reg_656);

assign max_val_3_fu_480_p3 = ((icmp_ln34_1_fu_476_p2[0:0] == 1'b1) ? val_2_reg_674 : max_val_1_reg_683);

assign max_val_5_fu_506_p3 = ((icmp_ln34_2_fu_501_p2[0:0] == 1'b1) ? val_3_reg_689 : max_val_3_fu_480_p3);

assign min_val_1_fu_467_p3 = ((icmp_ln35_fu_463_p2[0:0] == 1'b1) ? val_1_reg_665 : val_reg_656);

assign min_val_2_fu_491_p3 = ((icmp_ln35_1_fu_486_p2[0:0] == 1'b1) ? val_2_reg_674 : min_val_1_fu_467_p3);

assign min_val_3_fu_556_p3 = ((icmp_ln35_2_fu_552_p2[0:0] == 1'b1) ? val_3_reg_689 : min_val_2_reg_698);

assign p_cast6_fu_323_p1 = empty_17_fu_317_p2;

assign p_cast7_fu_332_p1 = empty_18_fu_327_p2;

assign p_cast_fu_298_p1 = tmp_4_fu_290_p3;

assign select_ln24_fu_256_p3 = ((ap_phi_mux_icmp_ln258_phi_fu_225_p4[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_j7_load);

assign sum_fu_536_p2 = (zext_ln36_2_fu_532_p1 + zext_ln36_1_fu_522_p1);

assign tmp_2_fu_282_p3 = {{empty_fu_278_p1}, {5'd0}};

assign tmp_4_fu_290_p3 = {{empty_fu_278_p1}, {7'd0}};

assign tmp_5_fu_302_p3 = {{empty_fu_278_p1}, {7'd64}};

assign tmp_fu_336_p2 = (p_cast7_fu_332_p1 + in_img_read_reg_605);

assign zext_ln25_1_fu_314_p1 = select_ln24_reg_610;

assign zext_ln25_fu_310_p1 = tmp_5_fu_302_p3;

assign zext_ln27_1_fu_498_p1 = val_2_reg_674;

assign zext_ln27_fu_473_p1 = val_1_reg_665;

assign zext_ln29_fu_460_p1 = val_reg_656;

assign zext_ln36_1_fu_522_p1 = add_ln36_fu_516_p2;

assign zext_ln36_2_fu_532_p1 = add_ln36_1_fu_526_p2;

assign zext_ln36_fu_513_p1 = val_3_reg_689;

endmodule //pollings
