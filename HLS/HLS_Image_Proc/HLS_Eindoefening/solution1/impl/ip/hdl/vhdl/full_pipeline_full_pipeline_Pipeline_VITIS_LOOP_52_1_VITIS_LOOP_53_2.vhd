-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity full_pipeline_full_pipeline_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    div2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    bound : IN STD_LOGIC_VECTOR (63 downto 0);
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln20 : IN STD_LOGIC_VECTOR (31 downto 0);
    avg_out : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of full_pipeline_full_pipeline_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state16_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln52_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal icmp_ln53_1_reg_787 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_reg_787_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal first_iter_2_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state17_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln20_cast_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_cast_reg_728 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln52_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln52_reg_733_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_733_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_733_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_733_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_266_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln52_reg_737 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state15_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln52_1_fu_280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln52_1_reg_743 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_3_fu_312_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal add_ln52_3_reg_753 : STD_LOGIC_VECTOR (45 downto 0);
    signal first_iter_2_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_add21_fu_348_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_add21_reg_762 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_add14_fu_378_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_add14_reg_767 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln52_5_fu_416_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal add_ln52_5_reg_772 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal empty_28_fu_449_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal empty_28_reg_777 : STD_LOGIC_VECTOR (46 downto 0);
    signal empty_29_fu_482_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal empty_29_reg_782 : STD_LOGIC_VECTOR (46 downto 0);
    signal icmp_ln53_1_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_reg_787_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_reg_787_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_reg_787_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_reg_787_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln53_mid2_v_reg_791 : STD_LOGIC_VECTOR (61 downto 0);
    signal gmem_addr_4_reg_796 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_5_reg_802 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_4_read_1_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_5_read_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_5_read_1_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_844 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln61_fu_675_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln61_reg_849 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sext_ln58_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln58_1_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln52_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal j_fu_128 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln53_fu_488_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_132 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal indvar_flatten37_fu_136 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln52_fu_240_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_2_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_288_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_1_fu_300_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal zext_ln52_fu_296_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal zext_ln52_1_fu_308_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_4_fu_324_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_8_fu_336_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_shl19_fu_332_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_shl20_fu_344_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_11_fu_354_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_12_fu_366_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_shl12_fu_362_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_shl13_fu_374_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_2_fu_389_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln52_3_fu_396_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_3_fu_405_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln52_4_fu_400_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal zext_ln52_4_fu_412_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_9_fu_422_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl22_fu_429_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_10_fu_438_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_add23_fu_433_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_shl24_fu_445_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_13_fu_455_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl15_fu_462_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_14_fu_471_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_add16_fu_466_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_shl17_fu_478_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln53_2_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln52_2_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln52_1_fu_510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_531_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_cast48_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp16_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast44_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_1_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_31_fu_553_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_559_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_30_fu_547_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln58_1_fu_579_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln58_1_fu_619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln58_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln61_fu_647_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_652_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln61_fu_662_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln61_1_fu_666_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln61_1_fu_672_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter5_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to6 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component full_pipeline_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component full_pipeline_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    i_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_fu_132 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln52_reg_733 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                i_fu_132 <= select_ln52_1_fu_280_p3;
            end if; 
        end if;
    end process;

    indvar_flatten37_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten37_fu_136 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln52_fu_235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten37_fu_136 <= add_ln52_fu_240_p2;
            end if; 
        end if;
    end process;

    j_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_fu_128 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln52_reg_733 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                j_fu_128 <= add_ln53_fu_488_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                    add_ln52_3_reg_753(45 downto 8) <= add_ln52_3_fu_312_p2(45 downto 8);
                first_iter_2_reg_758 <= first_iter_2_fu_318_p2;
                    p_add14_reg_767(46 downto 9) <= p_add14_fu_378_p2(46 downto 9);
                    p_add21_reg_762(46 downto 9) <= p_add21_fu_348_p2(46 downto 9);
                select_ln52_1_reg_743 <= select_ln52_1_fu_280_p3;
                select_ln52_reg_737 <= select_ln52_fu_266_p3;
                select_ln61_reg_849 <= select_ln61_fu_675_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                    add_ln52_5_reg_772(45 downto 4) <= add_ln52_5_fu_416_p2(45 downto 4);
                    empty_28_reg_777(46 downto 5) <= empty_28_fu_449_p2(46 downto 5);
                    empty_29_reg_782(46 downto 5) <= empty_29_fu_482_p2(46 downto 5);
                icmp_ln53_1_reg_787 <= icmp_ln53_1_fu_497_p2;
                icmp_ln53_1_reg_787_pp0_iter1_reg <= icmp_ln53_1_reg_787;
                icmp_ln53_1_reg_787_pp0_iter2_reg <= icmp_ln53_1_reg_787_pp0_iter1_reg;
                icmp_ln53_1_reg_787_pp0_iter3_reg <= icmp_ln53_1_reg_787_pp0_iter2_reg;
                icmp_ln53_1_reg_787_pp0_iter4_reg <= icmp_ln53_1_reg_787_pp0_iter3_reg;
                icmp_ln53_1_reg_787_pp0_iter5_reg <= icmp_ln53_1_reg_787_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                gmem_addr_4_read_1_reg_819 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_4_reg_796 <= sext_ln58_fu_569_p1;
                gmem_addr_5_reg_802 <= sext_ln58_1_fu_589_p1;
                sext_ln53_mid2_v_reg_791 <= add_ln52_1_fu_510_p2(63 downto 2);
                    zext_ln20_cast_reg_728(31 downto 0) <= zext_ln20_cast_fu_213_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_5_read_1_reg_829 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                gmem_addr_5_read_reg_824 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln52_reg_733 <= icmp_ln52_fu_235_p2;
                icmp_ln52_reg_733_pp0_iter1_reg <= icmp_ln52_reg_733;
                icmp_ln52_reg_733_pp0_iter2_reg <= icmp_ln52_reg_733_pp0_iter1_reg;
                icmp_ln52_reg_733_pp0_iter3_reg <= icmp_ln52_reg_733_pp0_iter2_reg;
                icmp_ln52_reg_733_pp0_iter4_reg <= icmp_ln52_reg_733_pp0_iter3_reg;
                sum_1_reg_834 <= sum_1_fu_623_p2;
                tmp_15_reg_839 <= sum_1_fu_623_p2(31 downto 31);
                tmp_7_reg_844 <= sum_1_fu_623_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sum_reg_814 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    zext_ln20_cast_reg_728(63 downto 32) <= "00000000000000000000000000000000";
    add_ln52_3_reg_753(7 downto 0) <= "00000000";
    p_add21_reg_762(8 downto 0) <= "100000000";
    p_add14_reg_767(8 downto 0) <= "000000000";
    add_ln52_5_reg_772(3 downto 0) <= "0000";
    empty_28_reg_777(4 downto 0) <= "10000";
    empty_29_reg_782(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter5_stage0, ap_idle_pp0_0to4, ap_idle_pp0_1to6, ap_done_pending_pp0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to6 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln52_1_fu_510_p2 <= std_logic_vector(unsigned(zext_ln52_2_fu_507_p1) + unsigned(avg_out));
    add_ln52_2_fu_274_p2 <= std_logic_vector(unsigned(i_fu_132) + unsigned(ap_const_lv32_1));
    add_ln52_3_fu_312_p2 <= std_logic_vector(unsigned(zext_ln52_fu_296_p1) + unsigned(zext_ln52_1_fu_308_p1));
    add_ln52_4_fu_400_p2 <= std_logic_vector(unsigned(add_ln52_3_reg_753) + unsigned(zext_ln52_3_fu_396_p1));
    add_ln52_5_fu_416_p2 <= std_logic_vector(unsigned(add_ln52_4_fu_400_p2) + unsigned(zext_ln52_4_fu_412_p1));
    add_ln52_fu_240_p2 <= std_logic_vector(unsigned(indvar_flatten37_fu_136) + unsigned(ap_const_lv64_1));
    add_ln53_fu_488_p2 <= std_logic_vector(unsigned(select_ln52_reg_737) + unsigned(ap_const_lv31_1));
    add_ln58_1_fu_619_p2 <= std_logic_vector(unsigned(gmem_addr_4_read_1_reg_819) + unsigned(gmem_addr_5_read_1_reg_829));
    add_ln58_fu_615_p2 <= std_logic_vector(unsigned(sum_reg_814) + unsigned(gmem_addr_5_read_reg_824));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_block_state17_pp0_stage0_iter4, ap_block_state25_pp0_stage0_iter6)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp0_stage0_iter6)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage0_iter4)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_block_state17_pp0_stage0_iter4, ap_block_state25_pp0_stage0_iter6)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp0_stage0_iter6)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage0_iter4)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state6_io, ap_block_state14_pp0_stage1_iter3)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage1_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state6_io, ap_block_state14_pp0_stage1_iter3)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage1_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state15_pp0_stage2_iter3)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_pp0_stage2_iter3));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state15_pp0_stage2_iter3)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_pp0_stage2_iter3));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state16_pp0_stage3_iter3)
    begin
                ap_block_pp0_stage3_01001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_pp0_stage3_iter3));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, ap_block_state16_pp0_stage3_iter3)
    begin
                ap_block_pp0_stage3_11001 <= (((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_pp0_stage3_iter3)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, ap_block_state16_pp0_stage3_iter3)
    begin
                ap_block_pp0_stage3_subdone <= (((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_pp0_stage3_iter3)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state14_pp0_stage1_iter3_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state14_pp0_stage1_iter3 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state15_pp0_stage2_iter3_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state15_pp0_stage2_iter3 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state16_pp0_stage3_iter3_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state16_pp0_stage3_iter3 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state17_pp0_stage0_iter4_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state17_pp0_stage0_iter4 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state25_pp0_stage0_iter6_assign_proc : process(m_axi_gmem_BVALID, icmp_ln53_1_reg_787_pp0_iter5_reg)
    begin
                ap_block_state25_pp0_stage0_iter6 <= ((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln53_1_reg_787_pp0_iter5_reg = ap_const_lv1_0));
    end process;


    ap_block_state6_io_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, first_iter_2_reg_758)
    begin
                ap_block_state6_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (first_iter_2_reg_758 = ap_const_lv1_1)));
    end process;


    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln52_reg_733)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln52_reg_733 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, icmp_ln52_reg_733_pp0_iter4_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln52_reg_733_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_28_fu_449_p2 <= std_logic_vector(unsigned(p_add23_fu_433_p2) + unsigned(p_shl24_fu_445_p1));
    empty_29_fu_482_p2 <= std_logic_vector(unsigned(p_add16_fu_466_p2) + unsigned(p_shl17_fu_478_p1));
    empty_30_fu_547_p2 <= std_logic_vector(unsigned(tmp16_fu_542_p2) + unsigned(p_cast44_fu_525_p1));
    empty_31_fu_553_p2 <= std_logic_vector(unsigned(tmp16_fu_542_p2) + unsigned(zext_ln53_1_fu_528_p1));
    first_iter_2_fu_318_p2 <= "1" when (select_ln52_fu_266_p3 = ap_const_lv31_0) else "0";

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, m_axi_gmem_ARREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_AWREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, first_iter_2_reg_758)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (first_iter_2_reg_758 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, m_axi_gmem_BVALID, ap_block_pp0_stage0, icmp_ln53_1_reg_787_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln53_1_reg_787_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, m_axi_gmem_WREADY, ap_block_pp0_stage3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln52_fu_235_p2 <= "1" when (indvar_flatten37_fu_136 = bound) else "0";
    icmp_ln53_1_fu_497_p2 <= "1" when (signed(zext_ln53_2_fu_493_p1) < signed(div2_i)) else "0";
    icmp_ln53_fu_258_p2 <= "1" when (signed(zext_ln53_fu_254_p1) < signed(div2_i)) else "0";

    m_axi_gmem_ARADDR_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, gmem_addr_4_reg_796, gmem_addr_5_reg_802)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                m_axi_gmem_ARADDR <= gmem_addr_5_reg_802;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                m_axi_gmem_ARADDR <= gmem_addr_4_reg_796;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv64_2(32 - 1 downto 0);
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= sext_ln52_fu_599_p1;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= zext_ln20_cast_reg_728(32 - 1 downto 0);
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, first_iter_2_reg_758, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (first_iter_2_reg_758 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, icmp_ln53_1_reg_787_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln53_1_reg_787_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

        m_axi_gmem_WDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln61_reg_849),32));

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_add14_fu_378_p2 <= std_logic_vector(unsigned(p_shl12_fu_362_p1) + unsigned(p_shl13_fu_374_p1));
    p_add16_fu_466_p2 <= std_logic_vector(unsigned(p_add14_reg_767) + unsigned(p_shl15_fu_462_p1));
    p_add21_fu_348_p2 <= std_logic_vector(unsigned(p_shl19_fu_332_p1) + unsigned(p_shl20_fu_344_p1));
    p_add23_fu_433_p2 <= std_logic_vector(unsigned(p_add21_reg_762) + unsigned(p_shl22_fu_429_p1));
    p_cast44_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_28_reg_777),64));
    p_cast48_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_531_p3),64));
    p_shl12_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_354_p3),47));
    p_shl13_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_366_p3),47));
    p_shl15_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_455_p3),47));
    p_shl17_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_471_p3),47));
    p_shl19_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_324_p3),47));
    p_shl20_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_336_p3),47));
    p_shl22_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_422_p3),47));
    p_shl24_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_438_p3),47));
    select_ln52_1_fu_280_p3 <= 
        i_fu_132 when (icmp_ln53_fu_258_p2(0) = '1') else 
        add_ln52_2_fu_274_p2;
    select_ln52_fu_266_p3 <= 
        j_fu_128 when (icmp_ln53_fu_258_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln61_fu_675_p3 <= 
        sub_ln61_1_fu_666_p2 when (tmp_15_reg_839(0) = '1') else 
        zext_ln61_1_fu_672_p1;
        sext_ln52_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln53_mid2_v_reg_791),64));

        sext_ln58_1_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln58_1_fu_579_p4),64));

        sext_ln58_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_559_p4),64));

    sub_ln61_1_fu_666_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(zext_ln61_fu_662_p1));
    sub_ln61_fu_647_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sum_1_reg_834));
    sum_1_fu_623_p2 <= std_logic_vector(unsigned(add_ln58_1_fu_619_p2) + unsigned(add_ln58_fu_615_p2));
    tmp16_fu_542_p2 <= std_logic_vector(unsigned(p_cast48_fu_538_p1) + unsigned(input_r));
    tmp_10_fu_438_p3 <= (select_ln52_1_reg_743 & ap_const_lv5_10);
    tmp_11_fu_354_p3 <= (select_ln52_1_fu_280_p3 & ap_const_lv14_0);
    tmp_12_fu_366_p3 <= (select_ln52_1_fu_280_p3 & ap_const_lv9_0);
    tmp_13_fu_455_p3 <= (select_ln52_1_reg_743 & ap_const_lv7_0);
    tmp_14_fu_471_p3 <= (select_ln52_1_reg_743 & ap_const_lv5_0);
    tmp_1_fu_300_p3 <= (select_ln52_1_fu_280_p3 & ap_const_lv8_0);
    tmp_2_fu_389_p3 <= (select_ln52_1_reg_743 & ap_const_lv6_0);
    tmp_3_fu_405_p3 <= (select_ln52_1_reg_743 & ap_const_lv4_0);
    tmp_4_fu_324_p3 <= (select_ln52_1_fu_280_p3 & ap_const_lv14_2000);
    tmp_5_fu_531_p3 <= (select_ln52_reg_737 & ap_const_lv3_0);
    tmp_6_fu_652_p4 <= sub_ln61_fu_647_p2(31 downto 2);
    tmp_8_fu_336_p3 <= (select_ln52_1_fu_280_p3 & ap_const_lv9_100);
    tmp_9_fu_422_p3 <= (select_ln52_1_reg_743 & ap_const_lv7_40);
    tmp_fu_288_p3 <= (select_ln52_1_fu_280_p3 & ap_const_lv13_0);
    trunc_ln3_fu_559_p4 <= empty_31_fu_553_p2(63 downto 2);
    trunc_ln58_1_fu_579_p4 <= empty_30_fu_547_p2(63 downto 2);
    zext_ln20_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln20),64));
    zext_ln52_1_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_300_p3),46));
    zext_ln52_2_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_5_reg_772),64));
    zext_ln52_3_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_389_p3),46));
    zext_ln52_4_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_405_p3),46));
    zext_ln52_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_288_p3),46));
    zext_ln53_1_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_29_reg_782),64));
    zext_ln53_2_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_fu_488_p2),32));
    zext_ln53_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_128),32));
    zext_ln61_1_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_844),31));
    zext_ln61_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_652_p4),31));
end behav;
