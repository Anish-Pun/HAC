// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module full_pipeline_full_pipeline_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        div2_i,
        bound,
        input_r,
        zext_ln20,
        avg_out
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] div2_i;
input  [63:0] bound;
input  [63:0] input_r;
input  [31:0] zext_ln20;
input  [63:0] avg_out;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_block_state16_pp0_stage3_iter3;
reg    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln52_reg_733;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_B;
reg   [0:0] icmp_ln53_1_reg_787;
reg   [0:0] icmp_ln53_1_reg_787_pp0_iter5_reg;
reg    gmem_blk_n_W;
reg    gmem_blk_n_AW;
reg   [0:0] first_iter_2_reg_758;
reg    ap_block_state17_pp0_stage0_iter4;
reg    ap_block_state25_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln20_cast_fu_213_p1;
reg   [63:0] zext_ln20_cast_reg_728;
wire   [0:0] icmp_ln52_fu_235_p2;
reg    ap_block_state6_io;
reg    ap_block_state14_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln52_reg_733_pp0_iter1_reg;
reg   [0:0] icmp_ln52_reg_733_pp0_iter2_reg;
reg   [0:0] icmp_ln52_reg_733_pp0_iter3_reg;
reg   [0:0] icmp_ln52_reg_733_pp0_iter4_reg;
wire   [30:0] select_ln52_fu_266_p3;
reg   [30:0] select_ln52_reg_737;
reg    ap_block_state15_pp0_stage2_iter3;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] select_ln52_1_fu_280_p3;
reg   [31:0] select_ln52_1_reg_743;
wire   [45:0] add_ln52_3_fu_312_p2;
reg   [45:0] add_ln52_3_reg_753;
wire   [0:0] first_iter_2_fu_318_p2;
wire   [46:0] p_add21_fu_348_p2;
reg   [46:0] p_add21_reg_762;
wire   [46:0] p_add14_fu_378_p2;
reg   [46:0] p_add14_reg_767;
wire   [45:0] add_ln52_5_fu_416_p2;
reg   [45:0] add_ln52_5_reg_772;
reg    ap_block_pp0_stage3_11001;
wire   [46:0] empty_28_fu_449_p2;
reg   [46:0] empty_28_reg_777;
wire   [46:0] empty_29_fu_482_p2;
reg   [46:0] empty_29_reg_782;
wire   [0:0] icmp_ln53_1_fu_497_p2;
reg   [0:0] icmp_ln53_1_reg_787_pp0_iter1_reg;
reg   [0:0] icmp_ln53_1_reg_787_pp0_iter2_reg;
reg   [0:0] icmp_ln53_1_reg_787_pp0_iter3_reg;
reg   [0:0] icmp_ln53_1_reg_787_pp0_iter4_reg;
reg   [61:0] sext_ln53_mid2_v_reg_791;
reg   [63:0] gmem_addr_4_reg_796;
reg   [63:0] gmem_addr_5_reg_802;
reg   [31:0] sum_reg_814;
reg   [31:0] gmem_addr_4_read_1_reg_819;
reg   [31:0] gmem_addr_5_read_reg_824;
reg   [31:0] gmem_addr_5_read_1_reg_829;
wire   [31:0] sum_1_fu_623_p2;
reg   [31:0] sum_1_reg_834;
reg   [0:0] tmp_15_reg_839;
reg   [29:0] tmp_7_reg_844;
wire   [30:0] select_ln61_fu_675_p3;
reg   [30:0] select_ln61_reg_849;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire  signed [63:0] sext_ln58_fu_569_p1;
wire  signed [63:0] sext_ln58_1_fu_589_p1;
wire  signed [63:0] sext_ln52_fu_599_p1;
reg    ap_block_pp0_stage3_01001;
reg   [30:0] j_fu_128;
wire   [30:0] add_ln53_fu_488_p2;
wire    ap_loop_init;
reg   [31:0] i_fu_132;
reg   [63:0] indvar_flatten37_fu_136;
wire   [63:0] add_ln52_fu_240_p2;
wire   [31:0] zext_ln53_fu_254_p1;
wire   [0:0] icmp_ln53_fu_258_p2;
wire   [31:0] add_ln52_2_fu_274_p2;
wire   [44:0] tmp_fu_288_p3;
wire   [39:0] tmp_1_fu_300_p3;
wire   [45:0] zext_ln52_fu_296_p1;
wire   [45:0] zext_ln52_1_fu_308_p1;
wire   [45:0] tmp_4_fu_324_p3;
wire   [40:0] tmp_8_fu_336_p3;
wire   [46:0] p_shl19_fu_332_p1;
wire   [46:0] p_shl20_fu_344_p1;
wire   [45:0] tmp_11_fu_354_p3;
wire   [40:0] tmp_12_fu_366_p3;
wire   [46:0] p_shl12_fu_362_p1;
wire   [46:0] p_shl13_fu_374_p1;
wire   [37:0] tmp_2_fu_389_p3;
wire   [45:0] zext_ln52_3_fu_396_p1;
wire   [35:0] tmp_3_fu_405_p3;
wire   [45:0] add_ln52_4_fu_400_p2;
wire   [45:0] zext_ln52_4_fu_412_p1;
wire   [38:0] tmp_9_fu_422_p3;
wire   [46:0] p_shl22_fu_429_p1;
wire   [36:0] tmp_10_fu_438_p3;
wire   [46:0] p_add23_fu_433_p2;
wire   [46:0] p_shl24_fu_445_p1;
wire   [38:0] tmp_13_fu_455_p3;
wire   [46:0] p_shl15_fu_462_p1;
wire   [36:0] tmp_14_fu_471_p3;
wire   [46:0] p_add16_fu_466_p2;
wire   [46:0] p_shl17_fu_478_p1;
wire   [31:0] zext_ln53_2_fu_493_p1;
wire   [63:0] zext_ln52_2_fu_507_p1;
wire   [63:0] add_ln52_1_fu_510_p2;
wire   [33:0] tmp_5_fu_531_p3;
wire   [63:0] p_cast48_fu_538_p1;
wire   [63:0] tmp16_fu_542_p2;
wire   [63:0] p_cast44_fu_525_p1;
wire   [63:0] zext_ln53_1_fu_528_p1;
wire   [63:0] empty_31_fu_553_p2;
wire   [61:0] trunc_ln3_fu_559_p4;
wire   [63:0] empty_30_fu_547_p2;
wire   [61:0] trunc_ln58_1_fu_579_p4;
wire   [31:0] add_ln58_1_fu_619_p2;
wire   [31:0] add_ln58_fu_615_p2;
wire   [31:0] sub_ln61_fu_647_p2;
wire   [29:0] tmp_6_fu_652_p4;
wire   [30:0] zext_ln61_fu_662_p1;
wire   [30:0] sub_ln61_1_fu_666_p2;
wire   [30:0] zext_ln61_1_fu_672_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter5_stage0;
reg    ap_idle_pp0_0to4;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to6;
reg    ap_done_pending_pp0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_128 = 31'd0;
#0 i_fu_132 = 32'd0;
#0 indvar_flatten37_fu_136 = 64'd0;
#0 ap_done_reg = 1'b0;
end

full_pipeline_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_132 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln52_reg_733 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        i_fu_132 <= select_ln52_1_fu_280_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten37_fu_136 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten37_fu_136 <= add_ln52_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_fu_128 <= 31'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln52_reg_733 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        j_fu_128 <= add_ln53_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln52_3_reg_753[45 : 8] <= add_ln52_3_fu_312_p2[45 : 8];
        first_iter_2_reg_758 <= first_iter_2_fu_318_p2;
        p_add14_reg_767[46 : 9] <= p_add14_fu_378_p2[46 : 9];
        p_add21_reg_762[46 : 9] <= p_add21_fu_348_p2[46 : 9];
        select_ln52_1_reg_743 <= select_ln52_1_fu_280_p3;
        select_ln52_reg_737 <= select_ln52_fu_266_p3;
        select_ln61_reg_849 <= select_ln61_fu_675_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln52_5_reg_772[45 : 4] <= add_ln52_5_fu_416_p2[45 : 4];
        empty_28_reg_777[46 : 5] <= empty_28_fu_449_p2[46 : 5];
        empty_29_reg_782[46 : 5] <= empty_29_fu_482_p2[46 : 5];
        icmp_ln53_1_reg_787 <= icmp_ln53_1_fu_497_p2;
        icmp_ln53_1_reg_787_pp0_iter1_reg <= icmp_ln53_1_reg_787;
        icmp_ln53_1_reg_787_pp0_iter2_reg <= icmp_ln53_1_reg_787_pp0_iter1_reg;
        icmp_ln53_1_reg_787_pp0_iter3_reg <= icmp_ln53_1_reg_787_pp0_iter2_reg;
        icmp_ln53_1_reg_787_pp0_iter4_reg <= icmp_ln53_1_reg_787_pp0_iter3_reg;
        icmp_ln53_1_reg_787_pp0_iter5_reg <= icmp_ln53_1_reg_787_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem_addr_4_read_1_reg_819 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_4_reg_796 <= sext_ln58_fu_569_p1;
        gmem_addr_5_reg_802 <= sext_ln58_1_fu_589_p1;
        sext_ln53_mid2_v_reg_791 <= {{add_ln52_1_fu_510_p2[63:2]}};
        zext_ln20_cast_reg_728[31 : 0] <= zext_ln20_cast_fu_213_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_5_read_1_reg_829 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        gmem_addr_5_read_reg_824 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln52_reg_733 <= icmp_ln52_fu_235_p2;
        icmp_ln52_reg_733_pp0_iter1_reg <= icmp_ln52_reg_733;
        icmp_ln52_reg_733_pp0_iter2_reg <= icmp_ln52_reg_733_pp0_iter1_reg;
        icmp_ln52_reg_733_pp0_iter3_reg <= icmp_ln52_reg_733_pp0_iter2_reg;
        icmp_ln52_reg_733_pp0_iter4_reg <= icmp_ln52_reg_733_pp0_iter3_reg;
        sum_1_reg_834 <= sum_1_fu_623_p2;
        tmp_15_reg_839 <= sum_1_fu_623_p2[32'd31];
        tmp_7_reg_844 <= {{sum_1_fu_623_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sum_reg_814 <= m_axi_gmem_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln52_reg_733 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln52_reg_733_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter5_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to6 = 1'b1;
    end else begin
        ap_idle_pp0_1to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (first_iter_2_reg_758 == 1'd1) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln53_1_reg_787_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_5_reg_802;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_4_reg_796;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (first_iter_2_reg_758 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln53_1_reg_787_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_1_fu_510_p2 = (zext_ln52_2_fu_507_p1 + avg_out);

assign add_ln52_2_fu_274_p2 = (i_fu_132 + 32'd1);

assign add_ln52_3_fu_312_p2 = (zext_ln52_fu_296_p1 + zext_ln52_1_fu_308_p1);

assign add_ln52_4_fu_400_p2 = (add_ln52_3_reg_753 + zext_ln52_3_fu_396_p1);

assign add_ln52_5_fu_416_p2 = (add_ln52_4_fu_400_p2 + zext_ln52_4_fu_412_p1);

assign add_ln52_fu_240_p2 = (indvar_flatten37_fu_136 + 64'd1);

assign add_ln53_fu_488_p2 = (select_ln52_reg_737 + 31'd1);

assign add_ln58_1_fu_619_p2 = (gmem_addr_4_read_1_reg_819 + gmem_addr_5_read_1_reg_829);

assign add_ln58_fu_615_p2 = (sum_reg_814 + gmem_addr_5_read_reg_824);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state25_pp0_stage0_iter6)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state25_pp0_stage0_iter6)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage0_iter4)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage1_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage1_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state15_pp0_stage2_iter3));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state15_pp0_stage2_iter3));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state16_pp0_stage3_iter3));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state16_pp0_stage3_iter3)) | ((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state16_pp0_stage3_iter3)) | ((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state14_pp0_stage1_iter3 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state15_pp0_stage2_iter3 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state16_pp0_stage3_iter3 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state17_pp0_stage0_iter4 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state25_pp0_stage0_iter6 = ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln53_1_reg_787_pp0_iter5_reg == 1'd0));
end

always @ (*) begin
    ap_block_state6_io = ((m_axi_gmem_ARREADY == 1'b0) | ((m_axi_gmem_AWREADY == 1'b0) & (first_iter_2_reg_758 == 1'd1)));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign ap_ready = ap_ready_sig;

assign empty_28_fu_449_p2 = (p_add23_fu_433_p2 + p_shl24_fu_445_p1);

assign empty_29_fu_482_p2 = (p_add16_fu_466_p2 + p_shl17_fu_478_p1);

assign empty_30_fu_547_p2 = (tmp16_fu_542_p2 + p_cast44_fu_525_p1);

assign empty_31_fu_553_p2 = (tmp16_fu_542_p2 + zext_ln53_1_fu_528_p1);

assign first_iter_2_fu_318_p2 = ((select_ln52_fu_266_p3 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_235_p2 = ((indvar_flatten37_fu_136 == bound) ? 1'b1 : 1'b0);

assign icmp_ln53_1_fu_497_p2 = (($signed(zext_ln53_2_fu_493_p1) < $signed(div2_i)) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_258_p2 = (($signed(zext_ln53_fu_254_p1) < $signed(div2_i)) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 64'd2;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = sext_ln52_fu_599_p1;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = zext_ln20_cast_reg_728;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = $signed(select_ln61_reg_849);

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign p_add14_fu_378_p2 = (p_shl12_fu_362_p1 + p_shl13_fu_374_p1);

assign p_add16_fu_466_p2 = (p_add14_reg_767 + p_shl15_fu_462_p1);

assign p_add21_fu_348_p2 = (p_shl19_fu_332_p1 + p_shl20_fu_344_p1);

assign p_add23_fu_433_p2 = (p_add21_reg_762 + p_shl22_fu_429_p1);

assign p_cast44_fu_525_p1 = empty_28_reg_777;

assign p_cast48_fu_538_p1 = tmp_5_fu_531_p3;

assign p_shl12_fu_362_p1 = tmp_11_fu_354_p3;

assign p_shl13_fu_374_p1 = tmp_12_fu_366_p3;

assign p_shl15_fu_462_p1 = tmp_13_fu_455_p3;

assign p_shl17_fu_478_p1 = tmp_14_fu_471_p3;

assign p_shl19_fu_332_p1 = tmp_4_fu_324_p3;

assign p_shl20_fu_344_p1 = tmp_8_fu_336_p3;

assign p_shl22_fu_429_p1 = tmp_9_fu_422_p3;

assign p_shl24_fu_445_p1 = tmp_10_fu_438_p3;

assign select_ln52_1_fu_280_p3 = ((icmp_ln53_fu_258_p2[0:0] == 1'b1) ? i_fu_132 : add_ln52_2_fu_274_p2);

assign select_ln52_fu_266_p3 = ((icmp_ln53_fu_258_p2[0:0] == 1'b1) ? j_fu_128 : 31'd0);

assign select_ln61_fu_675_p3 = ((tmp_15_reg_839[0:0] == 1'b1) ? sub_ln61_1_fu_666_p2 : zext_ln61_1_fu_672_p1);

assign sext_ln52_fu_599_p1 = $signed(sext_ln53_mid2_v_reg_791);

assign sext_ln58_1_fu_589_p1 = $signed(trunc_ln58_1_fu_579_p4);

assign sext_ln58_fu_569_p1 = $signed(trunc_ln3_fu_559_p4);

assign sub_ln61_1_fu_666_p2 = (31'd0 - zext_ln61_fu_662_p1);

assign sub_ln61_fu_647_p2 = (32'd0 - sum_1_reg_834);

assign sum_1_fu_623_p2 = (add_ln58_1_fu_619_p2 + add_ln58_fu_615_p2);

assign tmp16_fu_542_p2 = (p_cast48_fu_538_p1 + input_r);

assign tmp_10_fu_438_p3 = {{select_ln52_1_reg_743}, {5'd16}};

assign tmp_11_fu_354_p3 = {{select_ln52_1_fu_280_p3}, {14'd0}};

assign tmp_12_fu_366_p3 = {{select_ln52_1_fu_280_p3}, {9'd0}};

assign tmp_13_fu_455_p3 = {{select_ln52_1_reg_743}, {7'd0}};

assign tmp_14_fu_471_p3 = {{select_ln52_1_reg_743}, {5'd0}};

assign tmp_1_fu_300_p3 = {{select_ln52_1_fu_280_p3}, {8'd0}};

assign tmp_2_fu_389_p3 = {{select_ln52_1_reg_743}, {6'd0}};

assign tmp_3_fu_405_p3 = {{select_ln52_1_reg_743}, {4'd0}};

assign tmp_4_fu_324_p3 = {{select_ln52_1_fu_280_p3}, {14'd8192}};

assign tmp_5_fu_531_p3 = {{select_ln52_reg_737}, {3'd0}};

assign tmp_6_fu_652_p4 = {{sub_ln61_fu_647_p2[31:2]}};

assign tmp_8_fu_336_p3 = {{select_ln52_1_fu_280_p3}, {9'd256}};

assign tmp_9_fu_422_p3 = {{select_ln52_1_reg_743}, {7'd64}};

assign tmp_fu_288_p3 = {{select_ln52_1_fu_280_p3}, {13'd0}};

assign trunc_ln3_fu_559_p4 = {{empty_31_fu_553_p2[63:2]}};

assign trunc_ln58_1_fu_579_p4 = {{empty_30_fu_547_p2[63:2]}};

assign zext_ln20_cast_fu_213_p1 = zext_ln20;

assign zext_ln52_1_fu_308_p1 = tmp_1_fu_300_p3;

assign zext_ln52_2_fu_507_p1 = add_ln52_5_reg_772;

assign zext_ln52_3_fu_396_p1 = tmp_2_fu_389_p3;

assign zext_ln52_4_fu_412_p1 = tmp_3_fu_405_p3;

assign zext_ln52_fu_296_p1 = tmp_fu_288_p3;

assign zext_ln53_1_fu_528_p1 = empty_29_reg_782;

assign zext_ln53_2_fu_493_p1 = add_ln53_fu_488_p2;

assign zext_ln53_fu_254_p1 = j_fu_128;

assign zext_ln61_1_fu_672_p1 = tmp_7_reg_844;

assign zext_ln61_fu_662_p1 = tmp_6_fu_652_p4;

always @ (posedge ap_clk) begin
    zext_ln20_cast_reg_728[63:32] <= 32'b00000000000000000000000000000000;
    add_ln52_3_reg_753[7:0] <= 8'b00000000;
    p_add21_reg_762[8:0] <= 9'b100000000;
    p_add14_reg_767[8:0] <= 9'b000000000;
    add_ln52_5_reg_772[3:0] <= 4'b0000;
    empty_28_reg_777[4:0] <= 5'b10000;
    empty_29_reg_782[4:0] <= 5'b00000;
end

endmodule //full_pipeline_full_pipeline_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_2
