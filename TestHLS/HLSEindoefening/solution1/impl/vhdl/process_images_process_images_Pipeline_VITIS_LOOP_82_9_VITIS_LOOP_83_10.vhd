-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_images_process_images_Pipeline_VITIS_LOOP_82_9_VITIS_LOOP_83_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_TREADY : IN STD_LOGIC;
    img_width : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln3 : IN STD_LOGIC_VECTOR (61 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_result_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_result_ce0 : OUT STD_LOGIC;
    conv_result_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sub17 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_out_TVALID : OUT STD_LOGIC;
    conv_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    conv_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    conv_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    conv_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    conv_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    conv_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of process_images_process_images_Pipeline_VITIS_LOOP_82_9_VITIS_LOOP_83_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv62_1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln82_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal conv_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln82_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln82_1_fu_175_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln82_1_reg_328 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln83_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln86_fu_205_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln86_reg_338 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln89_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_343 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_343_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln83_fu_214_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln83_reg_348 : STD_LOGIC_VECTOR (30 downto 0);
    signal cmp177_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp177_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln86_fu_261_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln86_reg_358 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_last_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln86_1_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_72 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal ap_sig_allocacmp_x_2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal y_fu_76 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln82_1_fu_233_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten36_fu_80 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_indvar_flatten36_load : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal conv_result_ce0_local : STD_LOGIC;
    signal zext_ln83_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_fu_193_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln86_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln82_fu_227_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln82_fu_240_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln82_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_248_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component process_images_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component process_images_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten36_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    indvar_flatten36_fu_80 <= ap_const_lv62_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln82_reg_324 = ap_const_lv1_0))) then 
                    indvar_flatten36_fu_80 <= add_ln82_1_reg_328;
                end if;
            end if; 
        end if;
    end process;

    x_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    x_fu_72 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    x_fu_72 <= add_ln83_reg_348;
                end if;
            end if; 
        end if;
    end process;

    y_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    y_fu_76 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    y_fu_76 <= select_ln82_1_fu_233_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln82_1_reg_328 <= add_ln82_1_fu_175_p2;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln82_reg_324 <= icmp_ln82_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                add_ln83_reg_348 <= add_ln83_fu_214_p2;
                add_ln86_reg_358 <= add_ln86_fu_261_p2;
                cmp177_reg_353 <= cmp177_fu_256_p2;
                icmp_ln83_reg_333 <= icmp_ln83_fu_188_p2;
                icmp_ln89_reg_343 <= icmp_ln89_fu_209_p2;
                icmp_ln89_reg_343_pp0_iter3_reg <= icmp_ln89_reg_343;
                p_last_reg_368 <= p_last_fu_279_p2;
                trunc_ln86_reg_338 <= trunc_ln86_fu_205_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln82_1_fu_175_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten36_load) + unsigned(ap_const_lv62_1));
    add_ln82_fu_227_p2 <= std_logic_vector(unsigned(y_fu_76) + unsigned(ap_const_lv31_1));
    add_ln83_fu_214_p2 <= std_logic_vector(unsigned(select_ln82_fu_193_p3) + unsigned(ap_const_lv31_1));
    add_ln86_fu_261_p2 <= std_logic_vector(unsigned(tmp_s_fu_248_p3) + unsigned(trunc_ln86_reg_338));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter5, conv_out_TREADY)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((conv_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, conv_out_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((conv_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter5, conv_out_TREADY)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((conv_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, conv_out_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((conv_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln82_fu_170_p2)
    begin
        if (((icmp_ln82_fu_170_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln82_reg_324)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln82_reg_324 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten36_load_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln82_reg_324, add_ln82_1_reg_328, indvar_flatten36_fu_80, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln82_reg_324 = ap_const_lv1_0))) then 
            ap_sig_allocacmp_indvar_flatten36_load <= add_ln82_1_reg_328;
        else 
            ap_sig_allocacmp_indvar_flatten36_load <= indvar_flatten36_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_x_2_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_grp1, add_ln83_reg_348, x_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_2 <= add_ln83_reg_348;
        else 
            ap_sig_allocacmp_x_2 <= x_fu_72;
        end if; 
    end process;

    cmp177_fu_256_p2 <= "1" when (zext_ln82_fu_244_p1 = sub) else "0";
    conv_out_TDATA <= conv_result_q0;

    conv_out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, conv_out_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            conv_out_TDATA_blk_n <= conv_out_TREADY;
        else 
            conv_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv_out_TDEST <= "X";
    conv_out_TID <= "X";
    conv_out_TKEEP <= ap_const_lv1_1;
    conv_out_TLAST <= p_last_reg_368;
    conv_out_TSTRB <= ap_const_lv1_1;
    conv_out_TUSER <= "X";

    conv_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            conv_out_TVALID <= ap_const_logic_1;
        else 
            conv_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    conv_result_address0 <= zext_ln86_1_fu_275_p1(16 - 1 downto 0);
    conv_result_ce0 <= conv_result_ce0_local;

    conv_result_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            conv_result_ce0_local <= ap_const_logic_1;
        else 
            conv_result_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln82_fu_170_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten36_load = mul_ln3) else "0";
    icmp_ln83_fu_188_p2 <= "1" when (signed(zext_ln83_fu_184_p1) < signed(img_width)) else "0";
    icmp_ln89_fu_209_p2 <= "1" when (zext_ln86_fu_201_p1 = sub17) else "0";
    p_last_fu_279_p2 <= (icmp_ln89_reg_343_pp0_iter3_reg and cmp177_reg_353);
    select_ln82_1_fu_233_p3 <= 
        y_fu_76 when (icmp_ln83_reg_333(0) = '1') else 
        add_ln82_fu_227_p2;
    select_ln82_fu_193_p3 <= 
        ap_sig_allocacmp_x_2 when (icmp_ln83_fu_188_p2(0) = '1') else 
        ap_const_lv31_0;
    tmp_s_fu_248_p3 <= (trunc_ln82_fu_240_p1 & ap_const_lv8_0);
    trunc_ln82_fu_240_p1 <= select_ln82_1_fu_233_p3(8 - 1 downto 0);
    trunc_ln86_fu_205_p1 <= select_ln82_fu_193_p3(16 - 1 downto 0);
    zext_ln82_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_1_fu_233_p3),32));
    zext_ln83_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_2),32));
    zext_ln86_1_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_reg_358),64));
    zext_ln86_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_fu_193_p3),32));
end behav;
