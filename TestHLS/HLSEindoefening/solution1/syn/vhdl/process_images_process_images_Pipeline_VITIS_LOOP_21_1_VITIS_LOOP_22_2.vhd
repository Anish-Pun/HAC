-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_images_process_images_Pipeline_VITIS_LOOP_21_1_VITIS_LOOP_22_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_TVALID : IN STD_LOGIC;
    img_width : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln3 : IN STD_LOGIC_VECTOR (61 downto 0);
    image_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_we0 : OUT STD_LOGIC;
    image_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    image_1_ce0 : OUT STD_LOGIC;
    image_1_we0 : OUT STD_LOGIC;
    image_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    image_2_ce0 : OUT STD_LOGIC;
    image_2_we0 : OUT STD_LOGIC;
    image_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_3_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    image_3_ce0 : OUT STD_LOGIC;
    image_3_we0 : OUT STD_LOGIC;
    image_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_4_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    image_4_ce0 : OUT STD_LOGIC;
    image_4_we0 : OUT STD_LOGIC;
    image_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_5_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    image_5_ce0 : OUT STD_LOGIC;
    image_5_we0 : OUT STD_LOGIC;
    image_5_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_stream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_873_p_din0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    grp_fu_873_p_din1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_873_p_dout0 : IN STD_LOGIC_VECTOR (62 downto 0);
    grp_fu_873_p_ce : OUT STD_LOGIC );
end;


architecture behav of process_images_process_images_Pipeline_VITIS_LOOP_21_1_VITIS_LOOP_22_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv63_AAAAAAAB : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010101010101010101010101010101011";
    constant ap_const_lv62_1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv31_3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln21_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal icmp_ln21_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_1_fu_240_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln21_1_reg_403 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln22_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_fu_266_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_413_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_417 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_reg_417_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_reg_417_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_reg_417_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_reg_417_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln22_fu_280_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln22_reg_422 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln21_1_fu_299_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln21_1_reg_427 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln21_fu_315_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_cast_reg_438 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_fu_341_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter9_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter10_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter11_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter12_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter13_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter14_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter15_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter16_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter17_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter18_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter19_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter20_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter21_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter22_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter23_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter24_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter25_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter26_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter27_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter28_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter29_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter30_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter31_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter32_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter33_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter34_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter35_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter36_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter37_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_443_pp0_iter38_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal urem_ln21_reg_448 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln25_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_92 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal ap_sig_allocacmp_x_3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal y_fu_96 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal indvar_flatten_fu_100 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal image_2_we0_local : STD_LOGIC;
    signal trunc_ln21_fu_346_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal image_2_ce0_local : STD_LOGIC;
    signal image_3_we0_local : STD_LOGIC;
    signal image_3_ce0_local : STD_LOGIC;
    signal image_r_we0_local : STD_LOGIC;
    signal image_r_ce0_local : STD_LOGIC;
    signal image_1_we0_local : STD_LOGIC;
    signal image_1_ce0_local : STD_LOGIC;
    signal image_4_we0_local : STD_LOGIC;
    signal image_4_ce0_local : STD_LOGIC;
    signal image_5_we0_local : STD_LOGIC;
    signal image_5_ce0_local : STD_LOGIC;
    signal zext_ln22_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_fu_258_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln21_fu_293_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_319_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_334_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_212_ce : STD_LOGIC;
    signal grp_fu_319_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component process_images_mul_31ns_33ns_63_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component process_images_urem_31ns_3ns_2_35_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component process_images_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_31ns_3ns_2_35_1_U2 : component process_images_urem_31ns_3ns_2_35_1
    generic map (
        ID => 1,
        NUM_STAGE => 35,
        din0_WIDTH => 31,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln21_1_reg_427,
        din1 => grp_fu_319_p1,
        ce => grp_fu_319_ce,
        dout => grp_fu_319_p2);

    flow_control_loop_pipe_sequential_init_U : component process_images_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter38_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten_fu_100 <= ap_const_lv62_0;
                elsif (((icmp_ln21_reg_399 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    indvar_flatten_fu_100 <= add_ln21_1_reg_403;
                end if;
            end if; 
        end if;
    end process;

    x_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_fu_92 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    x_fu_92 <= add_ln22_reg_422;
                end if;
            end if; 
        end if;
    end process;

    y_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    y_fu_96 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    y_fu_96 <= select_ln21_1_fu_299_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln21_1_reg_403 <= add_ln21_1_fu_240_p2;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln21_reg_399 <= icmp_ln21_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                add_ln22_reg_422 <= add_ln22_fu_280_p2;
                add_ln25_reg_443 <= add_ln25_fu_341_p2;
                add_ln25_reg_443_pp0_iter10_reg <= add_ln25_reg_443_pp0_iter9_reg;
                add_ln25_reg_443_pp0_iter11_reg <= add_ln25_reg_443_pp0_iter10_reg;
                add_ln25_reg_443_pp0_iter12_reg <= add_ln25_reg_443_pp0_iter11_reg;
                add_ln25_reg_443_pp0_iter13_reg <= add_ln25_reg_443_pp0_iter12_reg;
                add_ln25_reg_443_pp0_iter14_reg <= add_ln25_reg_443_pp0_iter13_reg;
                add_ln25_reg_443_pp0_iter15_reg <= add_ln25_reg_443_pp0_iter14_reg;
                add_ln25_reg_443_pp0_iter16_reg <= add_ln25_reg_443_pp0_iter15_reg;
                add_ln25_reg_443_pp0_iter17_reg <= add_ln25_reg_443_pp0_iter16_reg;
                add_ln25_reg_443_pp0_iter18_reg <= add_ln25_reg_443_pp0_iter17_reg;
                add_ln25_reg_443_pp0_iter19_reg <= add_ln25_reg_443_pp0_iter18_reg;
                add_ln25_reg_443_pp0_iter20_reg <= add_ln25_reg_443_pp0_iter19_reg;
                add_ln25_reg_443_pp0_iter21_reg <= add_ln25_reg_443_pp0_iter20_reg;
                add_ln25_reg_443_pp0_iter22_reg <= add_ln25_reg_443_pp0_iter21_reg;
                add_ln25_reg_443_pp0_iter23_reg <= add_ln25_reg_443_pp0_iter22_reg;
                add_ln25_reg_443_pp0_iter24_reg <= add_ln25_reg_443_pp0_iter23_reg;
                add_ln25_reg_443_pp0_iter25_reg <= add_ln25_reg_443_pp0_iter24_reg;
                add_ln25_reg_443_pp0_iter26_reg <= add_ln25_reg_443_pp0_iter25_reg;
                add_ln25_reg_443_pp0_iter27_reg <= add_ln25_reg_443_pp0_iter26_reg;
                add_ln25_reg_443_pp0_iter28_reg <= add_ln25_reg_443_pp0_iter27_reg;
                add_ln25_reg_443_pp0_iter29_reg <= add_ln25_reg_443_pp0_iter28_reg;
                add_ln25_reg_443_pp0_iter30_reg <= add_ln25_reg_443_pp0_iter29_reg;
                add_ln25_reg_443_pp0_iter31_reg <= add_ln25_reg_443_pp0_iter30_reg;
                add_ln25_reg_443_pp0_iter32_reg <= add_ln25_reg_443_pp0_iter31_reg;
                add_ln25_reg_443_pp0_iter33_reg <= add_ln25_reg_443_pp0_iter32_reg;
                add_ln25_reg_443_pp0_iter34_reg <= add_ln25_reg_443_pp0_iter33_reg;
                add_ln25_reg_443_pp0_iter35_reg <= add_ln25_reg_443_pp0_iter34_reg;
                add_ln25_reg_443_pp0_iter36_reg <= add_ln25_reg_443_pp0_iter35_reg;
                add_ln25_reg_443_pp0_iter37_reg <= add_ln25_reg_443_pp0_iter36_reg;
                add_ln25_reg_443_pp0_iter38_reg <= add_ln25_reg_443_pp0_iter37_reg;
                add_ln25_reg_443_pp0_iter8_reg <= add_ln25_reg_443;
                add_ln25_reg_443_pp0_iter9_reg <= add_ln25_reg_443_pp0_iter8_reg;
                icmp_ln22_reg_408 <= icmp_ln22_fu_253_p2;
                lshr_ln_reg_417 <= select_ln21_fu_258_p3(14 downto 1);
                lshr_ln_reg_417_pp0_iter3_reg <= lshr_ln_reg_417;
                lshr_ln_reg_417_pp0_iter4_reg <= lshr_ln_reg_417_pp0_iter3_reg;
                lshr_ln_reg_417_pp0_iter5_reg <= lshr_ln_reg_417_pp0_iter4_reg;
                lshr_ln_reg_417_pp0_iter6_reg <= lshr_ln_reg_417_pp0_iter5_reg;
                select_ln21_1_reg_427 <= select_ln21_1_fu_299_p3;
                tmp_cast_reg_438 <= grp_fu_873_p_dout0(39 downto 33);
                trunc_ln22_reg_413 <= trunc_ln22_fu_266_p1;
                trunc_ln22_reg_413_pp0_iter10_reg <= trunc_ln22_reg_413_pp0_iter9_reg;
                trunc_ln22_reg_413_pp0_iter11_reg <= trunc_ln22_reg_413_pp0_iter10_reg;
                trunc_ln22_reg_413_pp0_iter12_reg <= trunc_ln22_reg_413_pp0_iter11_reg;
                trunc_ln22_reg_413_pp0_iter13_reg <= trunc_ln22_reg_413_pp0_iter12_reg;
                trunc_ln22_reg_413_pp0_iter14_reg <= trunc_ln22_reg_413_pp0_iter13_reg;
                trunc_ln22_reg_413_pp0_iter15_reg <= trunc_ln22_reg_413_pp0_iter14_reg;
                trunc_ln22_reg_413_pp0_iter16_reg <= trunc_ln22_reg_413_pp0_iter15_reg;
                trunc_ln22_reg_413_pp0_iter17_reg <= trunc_ln22_reg_413_pp0_iter16_reg;
                trunc_ln22_reg_413_pp0_iter18_reg <= trunc_ln22_reg_413_pp0_iter17_reg;
                trunc_ln22_reg_413_pp0_iter19_reg <= trunc_ln22_reg_413_pp0_iter18_reg;
                trunc_ln22_reg_413_pp0_iter20_reg <= trunc_ln22_reg_413_pp0_iter19_reg;
                trunc_ln22_reg_413_pp0_iter21_reg <= trunc_ln22_reg_413_pp0_iter20_reg;
                trunc_ln22_reg_413_pp0_iter22_reg <= trunc_ln22_reg_413_pp0_iter21_reg;
                trunc_ln22_reg_413_pp0_iter23_reg <= trunc_ln22_reg_413_pp0_iter22_reg;
                trunc_ln22_reg_413_pp0_iter24_reg <= trunc_ln22_reg_413_pp0_iter23_reg;
                trunc_ln22_reg_413_pp0_iter25_reg <= trunc_ln22_reg_413_pp0_iter24_reg;
                trunc_ln22_reg_413_pp0_iter26_reg <= trunc_ln22_reg_413_pp0_iter25_reg;
                trunc_ln22_reg_413_pp0_iter27_reg <= trunc_ln22_reg_413_pp0_iter26_reg;
                trunc_ln22_reg_413_pp0_iter28_reg <= trunc_ln22_reg_413_pp0_iter27_reg;
                trunc_ln22_reg_413_pp0_iter29_reg <= trunc_ln22_reg_413_pp0_iter28_reg;
                trunc_ln22_reg_413_pp0_iter30_reg <= trunc_ln22_reg_413_pp0_iter29_reg;
                trunc_ln22_reg_413_pp0_iter31_reg <= trunc_ln22_reg_413_pp0_iter30_reg;
                trunc_ln22_reg_413_pp0_iter32_reg <= trunc_ln22_reg_413_pp0_iter31_reg;
                trunc_ln22_reg_413_pp0_iter33_reg <= trunc_ln22_reg_413_pp0_iter32_reg;
                trunc_ln22_reg_413_pp0_iter34_reg <= trunc_ln22_reg_413_pp0_iter33_reg;
                trunc_ln22_reg_413_pp0_iter35_reg <= trunc_ln22_reg_413_pp0_iter34_reg;
                trunc_ln22_reg_413_pp0_iter36_reg <= trunc_ln22_reg_413_pp0_iter35_reg;
                trunc_ln22_reg_413_pp0_iter37_reg <= trunc_ln22_reg_413_pp0_iter36_reg;
                trunc_ln22_reg_413_pp0_iter38_reg <= trunc_ln22_reg_413_pp0_iter37_reg;
                trunc_ln22_reg_413_pp0_iter3_reg <= trunc_ln22_reg_413;
                trunc_ln22_reg_413_pp0_iter4_reg <= trunc_ln22_reg_413_pp0_iter3_reg;
                trunc_ln22_reg_413_pp0_iter5_reg <= trunc_ln22_reg_413_pp0_iter4_reg;
                trunc_ln22_reg_413_pp0_iter6_reg <= trunc_ln22_reg_413_pp0_iter5_reg;
                trunc_ln22_reg_413_pp0_iter7_reg <= trunc_ln22_reg_413_pp0_iter6_reg;
                trunc_ln22_reg_413_pp0_iter8_reg <= trunc_ln22_reg_413_pp0_iter7_reg;
                trunc_ln22_reg_413_pp0_iter9_reg <= trunc_ln22_reg_413_pp0_iter8_reg;
                urem_ln21_reg_448 <= grp_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln21_1_fu_240_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv62_1));
    add_ln21_fu_293_p2 <= std_logic_vector(unsigned(y_fu_96) + unsigned(ap_const_lv31_1));
    add_ln22_fu_280_p2 <= std_logic_vector(unsigned(select_ln21_fu_258_p3) + unsigned(ap_const_lv31_1));
    add_ln25_fu_341_p2 <= std_logic_vector(unsigned(tmp_3_fu_334_p3) + unsigned(lshr_ln_reg_417_pp0_iter6_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter39, in_stream_TVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((in_stream_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter39, in_stream_TVALID)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((in_stream_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter39, in_stream_TVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((in_stream_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln21_fu_235_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln21_fu_235_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln21_reg_399)
    begin
        if (((icmp_ln21_reg_399 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter38_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter38_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln21_reg_399, add_ln21_1_reg_403, indvar_flatten_fu_100, ap_block_pp0_stage0)
    begin
        if (((icmp_ln21_reg_399 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= add_ln21_1_reg_403;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_x_3_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_grp1, add_ln22_reg_422, x_fu_92)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            ap_sig_allocacmp_x_3 <= add_ln22_reg_422;
        else 
            ap_sig_allocacmp_x_3 <= x_fu_92;
        end if; 
    end process;


    grp_fu_212_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_212_ce <= ap_const_logic_1;
        else 
            grp_fu_212_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_319_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_319_ce <= ap_const_logic_1;
        else 
            grp_fu_319_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_319_p1 <= ap_const_lv31_3(3 - 1 downto 0);
    grp_fu_873_p_ce <= grp_fu_212_ce;
    grp_fu_873_p_din0 <= zext_ln21_fu_315_p1(31 - 1 downto 0);
    grp_fu_873_p_din1 <= ap_const_lv63_AAAAAAAB(33 - 1 downto 0);
    icmp_ln21_fu_235_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = mul_ln3) else "0";
    icmp_ln22_fu_253_p2 <= "1" when (signed(zext_ln22_fu_249_p1) < signed(img_width)) else "0";
    image_1_address0 <= zext_ln25_fu_349_p1(14 - 1 downto 0);
    image_1_ce0 <= image_1_ce0_local;

    image_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_1_ce0_local <= ap_const_logic_1;
        else 
            image_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_1_d0 <= in_stream_TDATA;
    image_1_we0 <= image_1_we0_local;

    image_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1, trunc_ln22_reg_413_pp0_iter38_reg, trunc_ln21_fu_346_p1)
    begin
        if (((trunc_ln21_fu_346_p1 = ap_const_lv2_0) and (trunc_ln22_reg_413_pp0_iter38_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_1_we0_local <= ap_const_logic_1;
        else 
            image_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_2_address0 <= zext_ln25_fu_349_p1(14 - 1 downto 0);
    image_2_ce0 <= image_2_ce0_local;

    image_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_2_ce0_local <= ap_const_logic_1;
        else 
            image_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_2_d0 <= in_stream_TDATA;
    image_2_we0 <= image_2_we0_local;

    image_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1, trunc_ln22_reg_413_pp0_iter38_reg, trunc_ln21_fu_346_p1)
    begin
        if (((trunc_ln21_fu_346_p1 = ap_const_lv2_1) and (trunc_ln22_reg_413_pp0_iter38_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_2_we0_local <= ap_const_logic_1;
        else 
            image_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_3_address0 <= zext_ln25_fu_349_p1(14 - 1 downto 0);
    image_3_ce0 <= image_3_ce0_local;

    image_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_3_ce0_local <= ap_const_logic_1;
        else 
            image_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_3_d0 <= in_stream_TDATA;
    image_3_we0 <= image_3_we0_local;

    image_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1, trunc_ln22_reg_413_pp0_iter38_reg, trunc_ln21_fu_346_p1)
    begin
        if (((trunc_ln21_fu_346_p1 = ap_const_lv2_1) and (trunc_ln22_reg_413_pp0_iter38_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_3_we0_local <= ap_const_logic_1;
        else 
            image_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_4_address0 <= zext_ln25_fu_349_p1(14 - 1 downto 0);
    image_4_ce0 <= image_4_ce0_local;

    image_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_4_ce0_local <= ap_const_logic_1;
        else 
            image_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_4_d0 <= in_stream_TDATA;
    image_4_we0 <= image_4_we0_local;

    image_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1, trunc_ln22_reg_413_pp0_iter38_reg, trunc_ln21_fu_346_p1)
    begin
        if ((not((trunc_ln21_fu_346_p1 = ap_const_lv2_0)) and not((trunc_ln21_fu_346_p1 = ap_const_lv2_1)) and (trunc_ln22_reg_413_pp0_iter38_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_4_we0_local <= ap_const_logic_1;
        else 
            image_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_5_address0 <= zext_ln25_fu_349_p1(14 - 1 downto 0);
    image_5_ce0 <= image_5_ce0_local;

    image_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_5_ce0_local <= ap_const_logic_1;
        else 
            image_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_5_d0 <= in_stream_TDATA;
    image_5_we0 <= image_5_we0_local;

    image_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1, trunc_ln22_reg_413_pp0_iter38_reg, trunc_ln21_fu_346_p1)
    begin
        if ((not((trunc_ln21_fu_346_p1 = ap_const_lv2_0)) and not((trunc_ln21_fu_346_p1 = ap_const_lv2_1)) and (trunc_ln22_reg_413_pp0_iter38_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_5_we0_local <= ap_const_logic_1;
        else 
            image_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_r_address0 <= zext_ln25_fu_349_p1(14 - 1 downto 0);
    image_r_ce0 <= image_r_ce0_local;

    image_r_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_r_ce0_local <= ap_const_logic_1;
        else 
            image_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_r_d0 <= in_stream_TDATA;
    image_r_we0 <= image_r_we0_local;

    image_r_we0_local_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1, trunc_ln22_reg_413_pp0_iter38_reg, trunc_ln21_fu_346_p1)
    begin
        if (((trunc_ln21_fu_346_p1 = ap_const_lv2_0) and (trunc_ln22_reg_413_pp0_iter38_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            image_r_we0_local <= ap_const_logic_1;
        else 
            image_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter39, in_stream_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_TREADY_assign_proc : process(ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
            in_stream_TREADY <= ap_const_logic_1;
        else 
            in_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    select_ln21_1_fu_299_p3 <= 
        y_fu_96 when (icmp_ln22_reg_408(0) = '1') else 
        add_ln21_fu_293_p2;
    select_ln21_fu_258_p3 <= 
        ap_sig_allocacmp_x_3 when (icmp_ln22_fu_253_p2(0) = '1') else 
        ap_const_lv31_0;
    tmp_3_fu_334_p3 <= (tmp_cast_reg_438 & ap_const_lv7_0);
    trunc_ln21_fu_346_p1 <= urem_ln21_reg_448(2 - 1 downto 0);
    trunc_ln22_fu_266_p1 <= select_ln21_fu_258_p3(1 - 1 downto 0);
    zext_ln21_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_1_reg_427),63));
    zext_ln22_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_3),32));
    zext_ln25_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_reg_443_pp0_iter38_reg),64));
end behav;
