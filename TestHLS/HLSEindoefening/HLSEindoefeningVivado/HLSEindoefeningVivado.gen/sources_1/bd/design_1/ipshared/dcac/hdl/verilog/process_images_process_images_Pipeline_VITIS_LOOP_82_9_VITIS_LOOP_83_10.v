// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module process_images_process_images_Pipeline_VITIS_LOOP_82_9_VITIS_LOOP_83_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_TREADY,
        img_width,
        mul_ln3,
        sub,
        conv_result_address0,
        conv_result_ce0,
        conv_result_q0,
        sub17,
        conv_out_TDATA,
        conv_out_TVALID,
        conv_out_TKEEP,
        conv_out_TSTRB,
        conv_out_TUSER,
        conv_out_TLAST,
        conv_out_TID,
        conv_out_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   conv_out_TREADY;
input  [31:0] img_width;
input  [61:0] mul_ln3;
input  [31:0] sub;
output  [15:0] conv_result_address0;
output   conv_result_ce0;
input  [7:0] conv_result_q0;
input  [31:0] sub17;
output  [7:0] conv_out_TDATA;
output   conv_out_TVALID;
output  [0:0] conv_out_TKEEP;
output  [0:0] conv_out_TSTRB;
output  [0:0] conv_out_TUSER;
output  [0:0] conv_out_TLAST;
output  [0:0] conv_out_TID;
output  [0:0] conv_out_TDEST;

reg ap_idle;
reg conv_out_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln82_fu_170_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    conv_out_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
wire    ap_block_pp0_stage0_11001_grp0;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln82_reg_324;
wire   [61:0] add_ln82_1_fu_175_p2;
reg   [61:0] add_ln82_1_reg_328;
wire   [0:0] icmp_ln83_fu_188_p2;
reg   [0:0] icmp_ln83_reg_333;
wire   [15:0] trunc_ln86_fu_205_p1;
reg   [15:0] trunc_ln86_reg_338;
wire   [0:0] icmp_ln89_fu_209_p2;
reg   [0:0] icmp_ln89_reg_343;
reg   [0:0] icmp_ln89_reg_343_pp0_iter3_reg;
wire   [30:0] add_ln83_fu_214_p2;
reg   [30:0] add_ln83_reg_348;
wire   [0:0] cmp177_fu_256_p2;
reg   [0:0] cmp177_reg_353;
wire   [15:0] add_ln86_fu_261_p2;
reg   [15:0] add_ln86_reg_358;
wire   [0:0] p_last_fu_279_p2;
reg   [0:0] p_last_reg_368;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln86_1_fu_275_p1;
reg   [30:0] x_fu_72;
reg   [30:0] ap_sig_allocacmp_x_2;
wire    ap_loop_init;
reg   [30:0] y_fu_76;
wire   [30:0] select_ln82_1_fu_233_p3;
reg   [61:0] indvar_flatten36_fu_80;
reg   [61:0] ap_sig_allocacmp_indvar_flatten36_load;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
reg    conv_result_ce0_local;
wire   [31:0] zext_ln83_fu_184_p1;
wire   [30:0] select_ln82_fu_193_p3;
wire   [31:0] zext_ln86_fu_201_p1;
wire   [30:0] add_ln82_fu_227_p2;
wire   [7:0] trunc_ln82_fu_240_p1;
wire   [31:0] zext_ln82_fu_244_p1;
wire   [15:0] tmp_s_fu_248_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 x_fu_72 = 31'd0;
#0 y_fu_76 = 31'd0;
#0 indvar_flatten36_fu_80 = 62'd0;
#0 ap_done_reg = 1'b0;
end

process_images_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            indvar_flatten36_fu_80 <= 62'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln82_reg_324 == 1'd0))) begin
            indvar_flatten36_fu_80 <= add_ln82_1_reg_328;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            x_fu_72 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            x_fu_72 <= add_ln83_reg_348;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            y_fu_76 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            y_fu_76 <= select_ln82_1_fu_233_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln82_1_reg_328 <= add_ln82_1_fu_175_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln82_reg_324 <= icmp_ln82_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        add_ln83_reg_348 <= add_ln83_fu_214_p2;
        add_ln86_reg_358 <= add_ln86_fu_261_p2;
        cmp177_reg_353 <= cmp177_fu_256_p2;
        icmp_ln83_reg_333 <= icmp_ln83_fu_188_p2;
        icmp_ln89_reg_343 <= icmp_ln89_fu_209_p2;
        icmp_ln89_reg_343_pp0_iter3_reg <= icmp_ln89_reg_343;
        p_last_reg_368 <= p_last_fu_279_p2;
        trunc_ln86_reg_338 <= trunc_ln86_fu_205_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (*) begin
    if (((icmp_ln82_fu_170_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln82_reg_324 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln82_reg_324 == 1'd0))) begin
        ap_sig_allocacmp_indvar_flatten36_load = add_ln82_1_reg_328;
    end else begin
        ap_sig_allocacmp_indvar_flatten36_load = indvar_flatten36_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_x_2 = add_ln83_reg_348;
    end else begin
        ap_sig_allocacmp_x_2 = x_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        conv_out_TDATA_blk_n = conv_out_TREADY;
    end else begin
        conv_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        conv_out_TVALID = 1'b1;
    end else begin
        conv_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        conv_result_ce0_local = 1'b1;
    end else begin
        conv_result_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln82_1_fu_175_p2 = (ap_sig_allocacmp_indvar_flatten36_load + 62'd1);

assign add_ln82_fu_227_p2 = (y_fu_76 + 31'd1);

assign add_ln83_fu_214_p2 = (select_ln82_fu_193_p3 + 31'd1);

assign add_ln86_fu_261_p2 = (tmp_s_fu_248_p3 + trunc_ln86_reg_338);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((conv_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((conv_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((conv_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((conv_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign cmp177_fu_256_p2 = ((zext_ln82_fu_244_p1 == sub) ? 1'b1 : 1'b0);

assign conv_out_TDATA = conv_result_q0;

assign conv_out_TDEST = 'bx;

assign conv_out_TID = 'bx;

assign conv_out_TKEEP = 1'd1;

assign conv_out_TLAST = p_last_reg_368;

assign conv_out_TSTRB = 1'd1;

assign conv_out_TUSER = 'bx;

assign conv_result_address0 = zext_ln86_1_fu_275_p1;

assign conv_result_ce0 = conv_result_ce0_local;

assign icmp_ln82_fu_170_p2 = ((ap_sig_allocacmp_indvar_flatten36_load == mul_ln3) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_188_p2 = (($signed(zext_ln83_fu_184_p1) < $signed(img_width)) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_209_p2 = ((zext_ln86_fu_201_p1 == sub17) ? 1'b1 : 1'b0);

assign p_last_fu_279_p2 = (icmp_ln89_reg_343_pp0_iter3_reg & cmp177_reg_353);

assign select_ln82_1_fu_233_p3 = ((icmp_ln83_reg_333[0:0] == 1'b1) ? y_fu_76 : add_ln82_fu_227_p2);

assign select_ln82_fu_193_p3 = ((icmp_ln83_fu_188_p2[0:0] == 1'b1) ? ap_sig_allocacmp_x_2 : 31'd0);

assign tmp_s_fu_248_p3 = {{trunc_ln82_fu_240_p1}, {8'd0}};

assign trunc_ln82_fu_240_p1 = select_ln82_1_fu_233_p3[7:0];

assign trunc_ln86_fu_205_p1 = select_ln82_fu_193_p3[15:0];

assign zext_ln82_fu_244_p1 = select_ln82_1_fu_233_p3;

assign zext_ln83_fu_184_p1 = ap_sig_allocacmp_x_2;

assign zext_ln86_1_fu_275_p1 = add_ln86_reg_358;

assign zext_ln86_fu_201_p1 = select_ln82_fu_193_p3;

endmodule //process_images_process_images_Pipeline_VITIS_LOOP_82_9_VITIS_LOOP_83_10
