// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module process_images_process_images_Pipeline_VITIS_LOOP_98_11_VITIS_LOOP_99_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_out_TREADY,
        min_out_TREADY,
        avg_out_TREADY,
        out_w,
        mul_ln82,
        sub199,
        max_result_address0,
        max_result_ce0,
        max_result_q0,
        min_result_address0,
        min_result_ce0,
        min_result_q0,
        avg_result_address0,
        avg_result_ce0,
        avg_result_q0,
        sub202,
        max_out_TDATA,
        max_out_TVALID,
        max_out_TKEEP,
        max_out_TSTRB,
        max_out_TUSER,
        max_out_TLAST,
        max_out_TID,
        max_out_TDEST,
        min_out_TDATA,
        min_out_TVALID,
        min_out_TKEEP,
        min_out_TSTRB,
        min_out_TUSER,
        min_out_TLAST,
        min_out_TID,
        min_out_TDEST,
        avg_out_TDATA,
        avg_out_TVALID,
        avg_out_TKEEP,
        avg_out_TSTRB,
        avg_out_TUSER,
        avg_out_TLAST,
        avg_out_TID,
        avg_out_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   max_out_TREADY;
input   min_out_TREADY;
input   avg_out_TREADY;
input  [30:0] out_w;
input  [59:0] mul_ln82;
input  [31:0] sub199;
output  [15:0] max_result_address0;
output   max_result_ce0;
input  [7:0] max_result_q0;
output  [15:0] min_result_address0;
output   min_result_ce0;
input  [7:0] min_result_q0;
output  [15:0] avg_result_address0;
output   avg_result_ce0;
input  [7:0] avg_result_q0;
input  [31:0] sub202;
output  [7:0] max_out_TDATA;
output   max_out_TVALID;
output  [0:0] max_out_TKEEP;
output  [0:0] max_out_TSTRB;
output  [0:0] max_out_TUSER;
output  [0:0] max_out_TLAST;
output  [0:0] max_out_TID;
output  [0:0] max_out_TDEST;
output  [7:0] min_out_TDATA;
output   min_out_TVALID;
output  [0:0] min_out_TKEEP;
output  [0:0] min_out_TSTRB;
output  [0:0] min_out_TUSER;
output  [0:0] min_out_TLAST;
output  [0:0] min_out_TID;
output  [0:0] min_out_TDEST;
output  [7:0] avg_out_TDATA;
output   avg_out_TVALID;
output  [0:0] avg_out_TKEEP;
output  [0:0] avg_out_TSTRB;
output  [0:0] avg_out_TUSER;
output  [0:0] avg_out_TLAST;
output  [0:0] avg_out_TID;
output  [0:0] avg_out_TDEST;

reg ap_idle;
reg max_out_TVALID;
reg min_out_TVALID;
reg avg_out_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg    ap_block_state6_pp0_stage0_iter5_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln98_fu_308_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    max_out_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    min_out_TDATA_blk_n;
reg    avg_out_TDATA_blk_n;
wire    ap_block_pp0_stage0_11001_grp0;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001;
wire  signed [31:0] out_w_cast_fu_286_p1;
reg  signed [31:0] out_w_cast_reg_471;
reg   [0:0] icmp_ln98_reg_476;
wire   [59:0] add_ln98_1_fu_313_p2;
reg   [59:0] add_ln98_1_reg_480;
wire   [0:0] icmp_ln99_fu_326_p2;
reg   [0:0] icmp_ln99_reg_485;
wire   [15:0] trunc_ln104_fu_355_p1;
reg   [15:0] trunc_ln104_reg_490;
wire   [0:0] icmp_ln101_fu_359_p2;
reg   [0:0] icmp_ln101_reg_495;
reg   [0:0] icmp_ln101_reg_495_pp0_iter3_reg;
wire   [30:0] add_ln99_fu_364_p2;
reg   [30:0] add_ln99_reg_500;
wire   [0:0] cmp200_fu_406_p2;
reg   [0:0] cmp200_reg_505;
wire   [15:0] add_ln104_fu_411_p2;
reg   [15:0] add_ln104_reg_510;
wire   [0:0] last_fu_431_p2;
reg   [0:0] last_reg_530;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln104_1_fu_425_p1;
reg   [30:0] x_fu_118;
reg   [30:0] ap_sig_allocacmp_x_1;
wire    ap_loop_init;
reg   [30:0] y_fu_122;
wire   [30:0] select_ln98_1_fu_383_p3;
reg   [59:0] indvar_flatten48_fu_126;
reg   [59:0] ap_sig_allocacmp_indvar_flatten48_load;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
reg    max_result_ce0_local;
reg    min_result_ce0_local;
reg    avg_result_ce0_local;
wire   [31:0] zext_ln99_fu_322_p1;
wire   [29:0] trunc_ln99_fu_331_p1;
wire   [29:0] select_ln98_2_fu_343_p3;
wire   [30:0] select_ln98_fu_335_p3;
wire   [31:0] zext_ln104_fu_351_p1;
wire   [30:0] add_ln98_fu_377_p2;
wire   [7:0] trunc_ln98_fu_390_p1;
wire   [31:0] zext_ln98_fu_394_p1;
wire   [15:0] tmp_s_fu_398_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 x_fu_118 = 31'd0;
#0 y_fu_122 = 31'd0;
#0 indvar_flatten48_fu_126 = 60'd0;
#0 ap_done_reg = 1'b0;
end

process_images_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_flatten48_fu_126 <= 60'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln98_reg_476 == 1'd0))) begin
            indvar_flatten48_fu_126 <= add_ln98_1_reg_480;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_fu_118 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            x_fu_118 <= add_ln99_reg_500;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            y_fu_122 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            y_fu_122 <= select_ln98_1_fu_383_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        add_ln104_reg_510 <= add_ln104_fu_411_p2;
        add_ln99_reg_500 <= add_ln99_fu_364_p2;
        cmp200_reg_505 <= cmp200_fu_406_p2;
        icmp_ln101_reg_495 <= icmp_ln101_fu_359_p2;
        icmp_ln101_reg_495_pp0_iter3_reg <= icmp_ln101_reg_495;
        icmp_ln99_reg_485 <= icmp_ln99_fu_326_p2;
        last_reg_530 <= last_fu_431_p2;
        trunc_ln104_reg_490 <= trunc_ln104_fu_355_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln98_1_reg_480 <= add_ln98_1_fu_313_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln98_reg_476 <= icmp_ln98_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_w_cast_reg_471 <= out_w_cast_fu_286_p1;
    end
end

always @ (*) begin
    if (((icmp_ln98_fu_308_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln98_reg_476 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln98_reg_476 == 1'd0))) begin
        ap_sig_allocacmp_indvar_flatten48_load = add_ln98_1_reg_480;
    end else begin
        ap_sig_allocacmp_indvar_flatten48_load = indvar_flatten48_fu_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_x_1 = add_ln99_reg_500;
    end else begin
        ap_sig_allocacmp_x_1 = x_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        avg_out_TDATA_blk_n = avg_out_TREADY;
    end else begin
        avg_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        avg_out_TVALID = 1'b1;
    end else begin
        avg_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        avg_result_ce0_local = 1'b1;
    end else begin
        avg_result_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        max_out_TDATA_blk_n = max_out_TREADY;
    end else begin
        max_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        max_out_TVALID = 1'b1;
    end else begin
        max_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        max_result_ce0_local = 1'b1;
    end else begin
        max_result_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        min_out_TDATA_blk_n = min_out_TREADY;
    end else begin
        min_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        min_out_TVALID = 1'b1;
    end else begin
        min_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        min_result_ce0_local = 1'b1;
    end else begin
        min_result_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln104_fu_411_p2 = (tmp_s_fu_398_p3 + trunc_ln104_reg_490);

assign add_ln98_1_fu_313_p2 = (ap_sig_allocacmp_indvar_flatten48_load + 60'd1);

assign add_ln98_fu_377_p2 = (y_fu_122 + 31'd1);

assign add_ln99_fu_364_p2 = (select_ln98_fu_335_p3 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5_grp1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5_grp1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5_grp1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5_grp1 = ((avg_out_TREADY == 1'b0) | (min_out_TREADY == 1'b0) | (max_out_TREADY == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign avg_out_TDATA = avg_result_q0;

assign avg_out_TDEST = 'bx;

assign avg_out_TID = 'bx;

assign avg_out_TKEEP = 1'd1;

assign avg_out_TLAST = last_reg_530;

assign avg_out_TSTRB = 1'd1;

assign avg_out_TUSER = 'bx;

assign avg_result_address0 = zext_ln104_1_fu_425_p1;

assign avg_result_ce0 = avg_result_ce0_local;

assign cmp200_fu_406_p2 = ((zext_ln98_fu_394_p1 == sub199) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_359_p2 = ((zext_ln104_fu_351_p1 == sub202) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_308_p2 = ((ap_sig_allocacmp_indvar_flatten48_load == mul_ln82) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_326_p2 = (($signed(zext_ln99_fu_322_p1) < $signed(out_w_cast_reg_471)) ? 1'b1 : 1'b0);

assign last_fu_431_p2 = (icmp_ln101_reg_495_pp0_iter3_reg & cmp200_reg_505);

assign max_out_TDATA = max_result_q0;

assign max_out_TDEST = 'bx;

assign max_out_TID = 'bx;

assign max_out_TKEEP = 1'd1;

assign max_out_TLAST = last_reg_530;

assign max_out_TSTRB = 1'd1;

assign max_out_TUSER = 'bx;

assign max_result_address0 = zext_ln104_1_fu_425_p1;

assign max_result_ce0 = max_result_ce0_local;

assign min_out_TDATA = min_result_q0;

assign min_out_TDEST = 'bx;

assign min_out_TID = 'bx;

assign min_out_TKEEP = 1'd1;

assign min_out_TLAST = last_reg_530;

assign min_out_TSTRB = 1'd1;

assign min_out_TUSER = 'bx;

assign min_result_address0 = zext_ln104_1_fu_425_p1;

assign min_result_ce0 = min_result_ce0_local;

assign out_w_cast_fu_286_p1 = $signed(out_w);

assign select_ln98_1_fu_383_p3 = ((icmp_ln99_reg_485[0:0] == 1'b1) ? y_fu_122 : add_ln98_fu_377_p2);

assign select_ln98_2_fu_343_p3 = ((icmp_ln99_fu_326_p2[0:0] == 1'b1) ? trunc_ln99_fu_331_p1 : 30'd0);

assign select_ln98_fu_335_p3 = ((icmp_ln99_fu_326_p2[0:0] == 1'b1) ? ap_sig_allocacmp_x_1 : 31'd0);

assign tmp_s_fu_398_p3 = {{trunc_ln98_fu_390_p1}, {8'd0}};

assign trunc_ln104_fu_355_p1 = select_ln98_fu_335_p3[15:0];

assign trunc_ln98_fu_390_p1 = select_ln98_1_fu_383_p3[7:0];

assign trunc_ln99_fu_331_p1 = ap_sig_allocacmp_x_1[29:0];

assign zext_ln104_1_fu_425_p1 = add_ln104_reg_510;

assign zext_ln104_fu_351_p1 = select_ln98_2_fu_343_p3;

assign zext_ln98_fu_394_p1 = select_ln98_1_fu_383_p3;

assign zext_ln99_fu_322_p1 = ap_sig_allocacmp_x_1;

endmodule //process_images_process_images_Pipeline_VITIS_LOOP_98_11_VITIS_LOOP_99_12
