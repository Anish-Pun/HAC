// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module process_images_Block_entry_gmem_wr_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        conv_output_dout,
        conv_output_empty_n,
        conv_output_read,
        conv_output_num_data_valid,
        conv_output_fifo_cap,
        conv_result_address0,
        conv_result_ce0,
        conv_result_q0,
        p_read2,
        p_read3,
        max_result_address0,
        max_result_ce0,
        max_result_q0,
        max_output_dout,
        max_output_empty_n,
        max_output_read,
        max_output_num_data_valid,
        max_output_fifo_cap,
        min_result_address0,
        min_result_ce0,
        min_result_q0,
        min_output_dout,
        min_output_empty_n,
        min_output_read,
        min_output_num_data_valid,
        min_output_fifo_cap,
        avg_result_address0,
        avg_result_ce0,
        avg_result_q0,
        avg_output_dout,
        avg_output_empty_n,
        avg_output_read,
        avg_output_num_data_valid,
        avg_output_fifo_cap
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
input  [31:0] p_read1;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [7:0] m_axi_gmem_0_WDATA;
output  [0:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [7:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [10:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [63:0] conv_output_dout;
input   conv_output_empty_n;
output   conv_output_read;
input  [2:0] conv_output_num_data_valid;
input  [2:0] conv_output_fifo_cap;
output  [21:0] conv_result_address0;
output   conv_result_ce0;
input  [7:0] conv_result_q0;
input  [0:0] p_read2;
input  [31:0] p_read3;
output  [19:0] max_result_address0;
output   max_result_ce0;
input  [7:0] max_result_q0;
input  [63:0] max_output_dout;
input   max_output_empty_n;
output   max_output_read;
input  [2:0] max_output_num_data_valid;
input  [2:0] max_output_fifo_cap;
output  [19:0] min_result_address0;
output   min_result_ce0;
input  [7:0] min_result_q0;
input  [63:0] min_output_dout;
input   min_output_empty_n;
output   min_output_read;
input  [2:0] min_output_num_data_valid;
input  [2:0] min_output_fifo_cap;
output  [19:0] avg_result_address0;
output   avg_result_ce0;
input  [7:0] avg_result_q0;
input  [63:0] avg_output_dout;
input   avg_output_empty_n;
output   avg_output_read;
input  [2:0] avg_output_num_data_valid;
input  [2:0] avg_output_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_0_AWVALID;
reg[63:0] m_axi_gmem_0_AWADDR;
reg[31:0] m_axi_gmem_0_AWLEN;
reg m_axi_gmem_0_WVALID;
reg[7:0] m_axi_gmem_0_WDATA;
reg m_axi_gmem_0_BREADY;
reg conv_output_read;
reg max_output_read;
reg min_output_read;
reg avg_output_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state10;
reg   [0:0] p_read33_reg_401;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state20;
reg    conv_output_blk_n;
reg    max_output_blk_n;
reg    min_output_blk_n;
reg    avg_output_blk_n;
reg   [31:0] p_read_1_reg_384;
reg    ap_block_state1;
reg   [0:0] p_read_2_reg_390;
reg   [31:0] p_read_3_reg_394;
wire   [0:0] p_read33_read_fu_112_p2;
reg   [63:0] avg_output_read_reg_405;
reg   [63:0] min_output_read_reg_410;
reg   [63:0] max_output_read_reg_415;
reg   [63:0] gmem_addr_reg_427;
wire   [31:0] select_ln83_fu_277_p3;
reg   [31:0] select_ln83_reg_433;
wire    ap_CS_fsm_state3;
reg   [7:0] conv_result_load_reg_446;
wire    ap_CS_fsm_state4;
wire   [31:0] select_ln91_fu_313_p3;
reg   [31:0] select_ln91_reg_458;
reg    ap_block_state10;
wire    ap_CS_fsm_state11;
reg   [63:0] gmem_addr_9_reg_471;
reg   [63:0] gmem_addr_10_reg_482;
reg   [63:0] gmem_addr_11_reg_493;
reg   [7:0] max_result_load_reg_499;
reg   [7:0] min_result_load_reg_504;
reg   [7:0] avg_result_load_reg_509;
wire   [63:0] zext_ln83_fu_298_p1;
wire   [0:0] icmp_ln83_1_fu_287_p2;
wire   [63:0] zext_ln91_fu_339_p1;
wire   [0:0] icmp_ln91_1_fu_328_p2;
wire   [63:0] add_ln93_fu_346_p2;
wire   [63:0] add_ln94_fu_357_p2;
wire   [63:0] add_ln95_fu_368_p2;
wire   [63:0] wide_trip_count7_i_i_fu_268_p1;
reg    ap_block_state13_io;
reg    ap_block_state14_io;
reg   [31:0] i_fu_86;
wire   [31:0] add_ln83_fu_292_p2;
reg   [31:0] i_1_fu_90;
wire   [31:0] add_ln91_fu_333_p2;
reg    conv_result_ce0_local;
reg    max_result_ce0_local;
reg    min_result_ce0_local;
reg    avg_result_ce0_local;
wire   [0:0] icmp_ln83_fu_272_p2;
wire   [0:0] icmp_ln91_fu_308_p2;
reg   [19:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 20'd1;
#0 i_fu_86 = 32'd0;
#0 i_1_fu_90 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state11) & ((icmp_ln91_1_fu_328_p2 == 1'd1) | (p_read_2_reg_390 == 1'd0)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((p_read_2_reg_390 == 1'd1)) begin
        if (((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10))) begin
            i_1_fu_90 <= 32'd0;
        end else if (((icmp_ln91_1_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
            i_1_fu_90 <= add_ln91_fu_333_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((p_read33_read_fu_112_p2 == 1'd1) & (1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_86 <= 32'd0;
    end else if (((icmp_ln83_1_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_fu_86 <= add_ln83_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        avg_output_read_reg_405 <= avg_output_dout;
        gmem_addr_reg_427 <= conv_output_dout;
        max_output_read_reg_415 <= max_output_dout;
        min_output_read_reg_410 <= min_output_dout;
        p_read33_reg_401 <= p_read;
        p_read_1_reg_384 <= p_read3;
        p_read_2_reg_390 <= p_read2;
        p_read_3_reg_394 <= p_read1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        avg_result_load_reg_509 <= avg_result_q0;
        max_result_load_reg_499 <= max_result_q0;
        min_result_load_reg_504 <= min_result_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_result_load_reg_446 <= conv_result_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_addr_10_reg_482 <= add_ln94_fu_357_p2;
        gmem_addr_11_reg_493 <= add_ln95_fu_368_p2;
        gmem_addr_9_reg_471 <= add_ln93_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        select_ln83_reg_433 <= select_ln83_fu_277_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10))) begin
        select_ln91_reg_458 <= select_ln91_fu_313_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state10)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state13_io)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state14_io)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_WREADY == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_WREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & ((icmp_ln91_1_fu_328_p2 == 1'd1) | (p_read_2_reg_390 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & ((icmp_ln91_1_fu_328_p2 == 1'd1) | (p_read_2_reg_390 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        avg_output_blk_n = avg_output_empty_n;
    end else begin
        avg_output_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        avg_output_read = 1'b1;
    end else begin
        avg_output_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        avg_result_ce0_local = 1'b1;
    end else begin
        avg_result_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_output_blk_n = conv_output_empty_n;
    end else begin
        conv_output_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_output_read = 1'b1;
    end else begin
        conv_output_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_result_ce0_local = 1'b1;
    end else begin
        conv_result_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AW = m_axi_gmem_0_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state10) & (p_read33_reg_401 == 1'd1)))) begin
        gmem_blk_n_B = m_axi_gmem_0_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_blk_n_W = m_axi_gmem_0_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
        m_axi_gmem_0_AWADDR = gmem_addr_11_reg_493;
    end else if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem_0_AWADDR = gmem_addr_10_reg_482;
    end else if (((m_axi_gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_AWADDR = gmem_addr_9_reg_471;
    end else if (((m_axi_gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWADDR = gmem_addr_reg_427;
    end else begin
        m_axi_gmem_0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14)) | ((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)) | ((m_axi_gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        m_axi_gmem_0_AWLEN = 64'd1;
    end else if (((m_axi_gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWLEN = wide_trip_count7_i_i_fu_268_p1;
    end else begin
        m_axi_gmem_0_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14)) | ((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)) | ((m_axi_gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((m_axi_gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        m_axi_gmem_0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10) & (p_read33_reg_401 == 1'd1)) | ((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)))) begin
        m_axi_gmem_0_BREADY = 1'b1;
    end else begin
        m_axi_gmem_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        m_axi_gmem_0_WDATA = avg_result_load_reg_509;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        m_axi_gmem_0_WDATA = min_result_load_reg_504;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        m_axi_gmem_0_WDATA = max_result_load_reg_499;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_axi_gmem_0_WDATA = conv_result_load_reg_446;
    end else begin
        m_axi_gmem_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14)) | ((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)) | ((m_axi_gmem_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((m_axi_gmem_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        m_axi_gmem_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        max_output_blk_n = max_output_empty_n;
    end else begin
        max_output_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        max_output_read = 1'b1;
    end else begin
        max_output_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        max_result_ce0_local = 1'b1;
    end else begin
        max_result_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        min_output_blk_n = min_output_empty_n;
    end else begin
        min_output_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        min_output_read = 1'b1;
    end else begin
        min_output_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        min_result_ce0_local = 1'b1;
    end else begin
        min_result_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((p_read33_read_fu_112_p2 == 1'd0) & (1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((p_read33_read_fu_112_p2 == 1'd1) & (1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln83_1_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_gmem_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & ((icmp_ln91_1_fu_328_p2 == 1'd1) | (p_read_2_reg_390 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((m_axi_gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((m_axi_gmem_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln83_fu_292_p2 = (i_fu_86 + 32'd1);

assign add_ln91_fu_333_p2 = (i_1_fu_90 + 32'd1);

assign add_ln93_fu_346_p2 = (max_output_read_reg_415 + zext_ln91_fu_339_p1);

assign add_ln94_fu_357_p2 = (min_output_read_reg_410 + zext_ln91_fu_339_p1);

assign add_ln95_fu_368_p2 = (avg_output_read_reg_405 + zext_ln91_fu_339_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (avg_output_empty_n == 1'b0) | (min_output_empty_n == 1'b0) | (max_output_empty_n == 1'b0) | (conv_output_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state10 = ((m_axi_gmem_0_BVALID == 1'b0) & (p_read33_reg_401 == 1'd1));
end

always @ (*) begin
    ap_block_state13_io = ((m_axi_gmem_0_WREADY == 1'b0) | (m_axi_gmem_0_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state14_io = ((m_axi_gmem_0_WREADY == 1'b0) | (m_axi_gmem_0_AWREADY == 1'b0));
end

assign avg_result_address0 = zext_ln91_fu_339_p1;

assign avg_result_ce0 = avg_result_ce0_local;

assign conv_result_address0 = zext_ln83_fu_298_p1;

assign conv_result_ce0 = conv_result_ce0_local;

assign icmp_ln83_1_fu_287_p2 = ((i_fu_86 == select_ln83_reg_433) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_272_p2 = ((p_read_3_reg_394 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_1_fu_328_p2 = ((i_1_fu_90 == select_ln91_reg_458) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_308_p2 = ((p_read_1_reg_384 != 32'd0) ? 1'b1 : 1'b0);

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_RREADY = 1'b0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 1'd1;

assign m_axi_gmem_0_WUSER = 1'd0;

assign max_result_address0 = zext_ln91_fu_339_p1;

assign max_result_ce0 = max_result_ce0_local;

assign min_result_address0 = zext_ln91_fu_339_p1;

assign min_result_ce0 = min_result_ce0_local;

assign p_read33_read_fu_112_p2 = p_read;

assign select_ln83_fu_277_p3 = ((icmp_ln83_fu_272_p2[0:0] == 1'b1) ? p_read_3_reg_394 : 32'd1);

assign select_ln91_fu_313_p3 = ((icmp_ln91_fu_308_p2[0:0] == 1'b1) ? p_read_1_reg_384 : 32'd1);

assign wide_trip_count7_i_i_fu_268_p1 = p_read_3_reg_394;

assign zext_ln83_fu_298_p1 = i_fu_86;

assign zext_ln91_fu_339_p1 = i_1_fu_90;

endmodule //process_images_Block_entry_gmem_wr_proc
