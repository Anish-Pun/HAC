-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_images_pooling_1_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_height : IN STD_LOGIC_VECTOR (31 downto 0);
    img_width : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of process_images_pooling_1_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal div133_fu_229_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal div133_reg_488 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln30_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln30_fu_243_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln30_reg_511 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln30_2_fu_251_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln30_2_reg_516 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln30_4_fu_275_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln30_4_reg_521 : STD_LOGIC_VECTOR (30 downto 0);
    signal img_width_cast1_fu_281_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal img_width_cast1_reg_526 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln30_6_fu_303_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln30_6_reg_534 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_45_fu_166_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_45_reg_539 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_cast_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_reg_544 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_46_fu_162_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal empty_46_reg_549 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln32_fu_340_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_reg_554 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_562 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem_addr_2_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln46_fu_404_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln46_reg_574 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln31_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_val_reg_584 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_2_reg_589 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_2_read_reg_594 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln43_fu_436_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln43_reg_599 : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_addr_2_read_1_reg_604 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln46_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_6_fu_377_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln31_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_5_fu_367_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln30_5_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_fu_92 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal output_r_we0_local : STD_LOGIC;
    signal output_r_ce0_local : STD_LOGIC;
    signal empty_46_fu_162_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal empty_45_fu_166_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_45_fu_166_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_fu_173_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub2_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_173_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_neg_fu_197_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_lshr_cast_fu_203_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_lshr_f_cast_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_213_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_lshr_f_cast_fu_219_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub2_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln30_2_fu_251_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln30_fu_247_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln30_fu_255_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal lshr_ln_fu_261_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln30_fu_271_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal img_width_cast1_fu_281_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_44_fu_309_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_318_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln31_2_fu_345_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln32_7_fu_358_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln32_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_8_fu_372_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_394_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln43_fu_433_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_fu_430_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln43_1_fu_442_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln43_2_fu_445_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln43_1_fu_451_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln43_4_fu_457_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln43_3_fu_448_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_fu_461_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln30_2_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal empty_45_fu_166_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component process_images_mul_20s_20s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component process_images_mul_32s_30ns_62_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;



begin
    mul_20s_20s_20_1_1_U32 : component process_images_mul_20s_20s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        din0 => empty_46_fu_162_p0,
        din1 => div133_reg_488,
        dout => empty_46_fu_162_p2);

    mul_32s_30ns_62_1_1_U33 : component process_images_mul_32s_30ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 30,
        dout_WIDTH => 62)
    port map (
        din0 => empty_45_fu_166_p0,
        din1 => empty_45_fu_166_p1,
        dout => empty_45_fu_166_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    indvar_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln30_fu_237_p2 = ap_const_lv1_1))) then 
                indvar_fu_92 <= ap_const_lv31_0;
            elsif (((icmp_ln31_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_fu_92 <= add_ln30_6_reg_534;
            end if; 
        end if;
    end process;

    x_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                x_reg_151 <= add_ln31_reg_579;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_reg_151 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln30_fu_237_p2 = ap_const_lv1_1))) then 
                y_fu_88 <= ap_const_lv32_0;
            elsif (((icmp_ln31_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_fu_88 <= add_ln30_5_fu_415_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln30_4_reg_521 <= add_ln30_4_fu_275_p2;
                div133_reg_488 <= div133_fu_229_p3;
                icmp_ln30_reg_493 <= icmp_ln30_fu_237_p2;
                img_width_cast1_reg_526 <= img_width_cast1_fu_281_p1;
                sext_ln30_2_reg_516 <= sext_ln30_2_fu_251_p1;
                sext_ln30_reg_511 <= sext_ln30_fu_243_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln30_6_reg_534 <= add_ln30_6_fu_303_p2;
                empty_45_reg_539 <= empty_45_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln31_reg_579 <= add_ln31_fu_409_p2;
                add_ln46_reg_574 <= add_ln46_fu_404_p2;
                gmem_addr_2_reg_568 <= add_ln32_5_fu_367_p2;
                gmem_addr_reg_562 <= add_ln32_6_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln32_reg_554 <= add_ln32_fu_340_p2;
                empty_46_reg_549 <= empty_46_fu_162_p2;
                    tmp_cast_reg_544(63 downto 1) <= tmp_cast_fu_325_p1(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln43_reg_599 <= add_ln43_fu_436_p2;
                gmem_addr_2_read_reg_594 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                gmem_addr_2_read_1_reg_604 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                gmem_addr_read_2_reg_589 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                pool_val_reg_584 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    tmp_cast_reg_544(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_0_ARREADY, m_axi_gmem_0_RVALID, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state16, icmp_ln30_reg_493, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln31_fu_349_p2, icmp_ln30_2_fu_298_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln30_2_fu_298_p2 = ap_const_lv1_1) or (icmp_ln30_reg_493 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln31_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((m_axi_gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((m_axi_gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((m_axi_gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((m_axi_gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((m_axi_gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln30_4_fu_275_p2 <= std_logic_vector(unsigned(zext_ln30_fu_271_p1) + unsigned(ap_const_lv31_1));
    add_ln30_5_fu_415_p2 <= std_logic_vector(unsigned(y_fu_88) + unsigned(ap_const_lv32_2));
    add_ln30_6_fu_303_p2 <= std_logic_vector(unsigned(indvar_fu_92) + unsigned(ap_const_lv31_1));
    add_ln30_fu_255_p2 <= std_logic_vector(unsigned(trunc_ln30_fu_247_p1) + unsigned(ap_const_lv31_7FFFFFFF));
    add_ln31_fu_409_p2 <= std_logic_vector(unsigned(x_reg_151) + unsigned(ap_const_lv32_2));
    add_ln32_5_fu_367_p2 <= std_logic_vector(signed(sext_ln32_fu_363_p1) + signed(add_ln32_reg_554));
    add_ln32_6_fu_377_p2 <= std_logic_vector(unsigned(add_ln32_8_fu_372_p2) + unsigned(tmp_cast_reg_544));
    add_ln32_7_fu_358_p2 <= std_logic_vector(signed(sext_ln30_2_reg_516) + signed(zext_ln31_2_fu_345_p1));
    add_ln32_8_fu_372_p2 <= std_logic_vector(unsigned(zext_ln31_fu_354_p1) + unsigned(input_r));
    add_ln32_fu_340_p2 <= std_logic_vector(signed(tmp_cast_fu_325_p1) + signed(input_r));
    add_ln43_1_fu_451_p2 <= std_logic_vector(unsigned(zext_ln43_1_fu_442_p1) + unsigned(zext_ln43_2_fu_445_p1));
    add_ln43_fu_436_p2 <= std_logic_vector(unsigned(zext_ln43_fu_433_p1) + unsigned(zext_ln42_fu_430_p1));
    add_ln46_fu_404_p2 <= std_logic_vector(unsigned(trunc_ln2_fu_394_p4) + unsigned(empty_46_reg_549));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln30_reg_493, ap_CS_fsm_state2, icmp_ln30_2_fu_298_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln30_2_fu_298_p2 = ap_const_lv1_1) or (icmp_ln30_reg_493 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln30_reg_493, ap_CS_fsm_state2, icmp_ln30_2_fu_298_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln30_2_fu_298_p2 = ap_const_lv1_1) or (icmp_ln30_reg_493 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    div133_fu_229_p3 <= 
        p_neg_t_fu_213_p2 when (tmp_2_fu_189_p3(0) = '1') else 
        p_lshr_f_cast_fu_219_p4;
    empty_44_fu_309_p1 <= indvar_fu_92(30 - 1 downto 0);
    empty_45_fu_166_p0 <= img_width_cast1_reg_526(32 - 1 downto 0);
    empty_45_fu_166_p1 <= empty_45_fu_166_p10(30 - 1 downto 0);
    empty_45_fu_166_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_44_fu_309_p1),62));
    empty_46_fu_162_p0 <= y_fu_88(20 downto 1);
    empty_fu_173_p0 <= img_width;
    empty_fu_173_p1 <= empty_fu_173_p0(21 - 1 downto 0);

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_blk_n_AR <= m_axi_gmem_0_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            gmem_blk_n_R <= m_axi_gmem_0_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln30_2_fu_298_p2 <= "1" when (indvar_fu_92 = add_ln30_4_reg_521) else "0";
    icmp_ln30_fu_237_p2 <= "1" when (signed(sub_fu_177_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln31_fu_349_p2 <= "1" when (signed(zext_ln31_2_fu_345_p1) < signed(sext_ln30_reg_511)) else "0";
    img_width_cast1_fu_281_p0 <= img_width;
        img_width_cast1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(img_width_cast1_fu_281_p0),62));

    lshr_ln_fu_261_p4 <= add_ln30_fu_255_p2(30 downto 1);

    m_axi_gmem_0_ARADDR_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state5, ap_CS_fsm_state6, gmem_addr_reg_562, gmem_addr_2_reg_568)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_2_reg_568;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_reg_562;
            else 
                m_axi_gmem_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_ARID <= ap_const_lv1_0;
    m_axi_gmem_0_ARLEN <= ap_const_lv64_2(32 - 1 downto 0);
    m_axi_gmem_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_0_ARVALID_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((((m_axi_gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((m_axi_gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            m_axi_gmem_0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem_0_BREADY <= ap_const_logic_0;

    m_axi_gmem_0_RREADY_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((m_axi_gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((m_axi_gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((m_axi_gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((m_axi_gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            m_axi_gmem_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_WDATA <= ap_const_lv8_0;
    m_axi_gmem_0_WID <= ap_const_lv1_0;
    m_axi_gmem_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_0_WSTRB <= ap_const_lv1_0;
    m_axi_gmem_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem_0_WVALID <= ap_const_logic_0;
    output_r_address0 <= zext_ln46_fu_478_p1(20 - 1 downto 0);
    output_r_ce0 <= output_r_ce0_local;

    output_r_ce0_local_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_ce0_local <= ap_const_logic_1;
        else 
            output_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= sum_fu_461_p2(9 downto 2);
    output_r_we0 <= output_r_we0_local;

    output_r_we0_local_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_we0_local <= ap_const_logic_1;
        else 
            output_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr_cast_fu_203_p4 <= p_neg_fu_197_p2(20 downto 1);
    p_lshr_f_cast_fu_219_p1 <= img_width;
    p_lshr_f_cast_fu_219_p4 <= p_lshr_f_cast_fu_219_p1(20 downto 1);
    p_neg_fu_197_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(empty_fu_173_p1));
    p_neg_t_fu_213_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(p_lshr_cast_fu_203_p4));
    sext_ln30_2_fu_251_p0 <= img_width;
        sext_ln30_2_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_2_fu_251_p0),33));

        sext_ln30_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub2_fu_183_p2),33));

        sext_ln32_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln32_7_fu_358_p2),64));

    sub2_fu_183_p0 <= img_width;
    sub2_fu_183_p2 <= std_logic_vector(signed(sub2_fu_183_p0) + signed(ap_const_lv32_FFFFFFFF));
    sub_fu_177_p2 <= std_logic_vector(unsigned(img_height) + unsigned(ap_const_lv32_FFFFFFFF));
    sum_fu_461_p2 <= std_logic_vector(unsigned(zext_ln43_4_fu_457_p1) + unsigned(zext_ln43_3_fu_448_p1));
    tmp_2_fu_189_p1 <= img_width;
    tmp_2_fu_189_p3 <= tmp_2_fu_189_p1(31 downto 31);
        tmp_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_318_p3),64));

    tmp_fu_318_p3 <= (empty_45_reg_539 & ap_const_lv1_0);
    trunc_ln2_fu_394_p4 <= x_reg_151(20 downto 1);
    trunc_ln30_fu_247_p1 <= sub_fu_177_p2(31 - 1 downto 0);
    zext_ln30_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_261_p4),31));
    zext_ln31_2_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_151),33));
    zext_ln31_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_151),64));
    zext_ln42_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_val_reg_584),9));
    zext_ln43_1_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_addr_2_read_reg_594),9));
    zext_ln43_2_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_addr_2_read_1_reg_604),9));
    zext_ln43_3_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_reg_599),10));
    zext_ln43_4_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_1_fu_451_p2),10));
    zext_ln43_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_addr_read_2_reg_589),9));
    zext_ln46_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_reg_574),64));
end behav;
