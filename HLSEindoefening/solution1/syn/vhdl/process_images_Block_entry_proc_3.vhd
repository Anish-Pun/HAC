-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_images_Block_entry_proc_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_height : IN STD_LOGIC_VECTOR (31 downto 0);
    img_width : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of process_images_Block_entry_proc_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mul_out_0_fu_36_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_out_0_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal select_ln88_fu_82_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln88_reg_184 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln89_fu_130_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln89_reg_189 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul10_out_0_fu_32_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul10_out_0_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_42_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln88_fu_50_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln88_fu_50_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln88_1_fu_56_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal lshr_ln88_2_fu_72_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_42_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln88_1_fu_66_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal lshr_ln88_2_fu_72_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_90_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln89_fu_98_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln89_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln89_1_fu_104_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal lshr_ln89_2_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_90_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln89_1_fu_114_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal lshr_ln89_2_fu_120_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln83_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component process_images_mul_31s_31s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component process_images_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_31s_31s_32_1_1_U47 : component process_images_mul_31s_31s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        din0 => select_ln89_reg_189,
        din1 => select_ln88_reg_184,
        dout => mul10_out_0_fu_32_p2);

    mul_32s_32s_32_1_1_U48 : component process_images_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => img_width,
        din1 => img_height,
        dout => mul_out_0_fu_36_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul10_out_0_reg_194 <= mul10_out_0_fu_32_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_out_0_reg_178 <= mul_out_0_fu_36_p2;
                select_ln88_reg_184 <= select_ln88_fu_82_p3;
                select_ln89_reg_189 <= select_ln89_fu_130_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_out_0_reg_178;
    ap_return_1 <= icmp_ln83_fu_146_p2;
    ap_return_2 <= mul10_out_0_reg_194;
    ap_return_3 <= icmp_ln91_fu_151_p2;
    icmp_ln83_fu_146_p2 <= "1" when (signed(mul_out_0_reg_178) > signed(ap_const_lv32_0)) else "0";
    icmp_ln91_fu_151_p2 <= "1" when (signed(mul10_out_0_reg_194) > signed(ap_const_lv32_0)) else "0";
    lshr_ln88_1_fu_56_p4 <= sub_ln88_fu_50_p2(31 downto 1);
    lshr_ln88_2_fu_72_p1 <= img_height;
    lshr_ln88_2_fu_72_p4 <= lshr_ln88_2_fu_72_p1(31 downto 1);
    lshr_ln89_1_fu_104_p4 <= sub_ln89_fu_98_p2(31 downto 1);
    lshr_ln89_2_fu_120_p1 <= img_width;
    lshr_ln89_2_fu_120_p4 <= lshr_ln89_2_fu_120_p1(31 downto 1);
    select_ln88_fu_82_p3 <= 
        sub_ln88_1_fu_66_p2 when (tmp_fu_42_p3(0) = '1') else 
        lshr_ln88_2_fu_72_p4;
    select_ln89_fu_130_p3 <= 
        sub_ln89_1_fu_114_p2 when (tmp_6_fu_90_p3(0) = '1') else 
        lshr_ln89_2_fu_120_p4;
    sub_ln88_1_fu_66_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(lshr_ln88_1_fu_56_p4));
    sub_ln88_fu_50_p1 <= img_height;
    sub_ln88_fu_50_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln88_fu_50_p1));
    sub_ln89_1_fu_114_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(lshr_ln89_1_fu_104_p4));
    sub_ln89_fu_98_p1 <= img_width;
    sub_ln89_fu_98_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln89_fu_98_p1));
    tmp_6_fu_90_p1 <= img_width;
    tmp_6_fu_90_p3 <= tmp_6_fu_90_p1(31 downto 31);
    tmp_fu_42_p1 <= img_height;
    tmp_fu_42_p3 <= tmp_fu_42_p1(31 downto 31);
end behav;
