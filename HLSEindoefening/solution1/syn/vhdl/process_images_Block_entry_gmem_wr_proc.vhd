-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_images_Block_entry_gmem_wr_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_output_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    conv_output_empty_n : IN STD_LOGIC;
    conv_output_read : OUT STD_LOGIC;
    conv_output_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    conv_output_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    conv_result_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    conv_result_ce0 : OUT STD_LOGIC;
    conv_result_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_result_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    max_result_ce0 : OUT STD_LOGIC;
    max_result_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    max_output_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    max_output_empty_n : IN STD_LOGIC;
    max_output_read : OUT STD_LOGIC;
    max_output_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    max_output_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    min_result_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    min_result_ce0 : OUT STD_LOGIC;
    min_result_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    min_output_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    min_output_empty_n : IN STD_LOGIC;
    min_output_read : OUT STD_LOGIC;
    min_output_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    min_output_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    avg_result_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    avg_result_ce0 : OUT STD_LOGIC;
    avg_result_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    avg_output_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    avg_output_empty_n : IN STD_LOGIC;
    avg_output_read : OUT STD_LOGIC;
    avg_output_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    avg_output_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of process_images_Block_entry_gmem_wr_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_read33_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal conv_output_blk_n : STD_LOGIC;
    signal max_output_blk_n : STD_LOGIC;
    signal min_output_blk_n : STD_LOGIC;
    signal avg_output_blk_n : STD_LOGIC;
    signal p_read_1_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_read_2_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_read_3_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_read33_read_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal avg_output_read_reg_405 : STD_LOGIC_VECTOR (63 downto 0);
    signal min_output_read_reg_410 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_output_read_reg_415 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_427 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln83_fu_277_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln83_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal conv_result_load_reg_446 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln91_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln91_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal gmem_addr_9_reg_471 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_10_reg_482 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_11_reg_493 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_result_load_reg_499 : STD_LOGIC_VECTOR (7 downto 0);
    signal min_result_load_reg_504 : STD_LOGIC_VECTOR (7 downto 0);
    signal avg_result_load_reg_509 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln83_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln83_1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln91_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln91_1_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_fu_346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln94_fu_357_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln95_fu_368_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal wide_trip_count7_i_i_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal i_fu_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln83_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln91_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_result_ce0_local : STD_LOGIC;
    signal max_result_ce0_local : STD_LOGIC;
    signal min_result_ce0_local : STD_LOGIC;
    signal avg_result_ce0_local : STD_LOGIC;
    signal icmp_ln83_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln91_1_fu_328_p2 = ap_const_lv1_1) or (p_read_2_reg_390 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_read_2_reg_390 = ap_const_lv1_1)) then
                if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    i_1_fu_90 <= ap_const_lv32_0;
                elsif (((icmp_ln91_1_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    i_1_fu_90 <= add_ln91_fu_333_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_read33_read_fu_112_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_86 <= ap_const_lv32_0;
            elsif (((icmp_ln83_1_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_86 <= add_ln83_fu_292_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                avg_output_read_reg_405 <= avg_output_dout;
                gmem_addr_reg_427 <= conv_output_dout;
                max_output_read_reg_415 <= max_output_dout;
                min_output_read_reg_410 <= min_output_dout;
                p_read33_reg_401 <= p_read;
                p_read_1_reg_384 <= p_read3;
                p_read_2_reg_390 <= p_read2;
                p_read_3_reg_394 <= p_read1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                avg_result_load_reg_509 <= avg_result_q0;
                max_result_load_reg_499 <= max_result_q0;
                min_result_load_reg_504 <= min_result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                conv_result_load_reg_446 <= conv_result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                gmem_addr_10_reg_482 <= add_ln94_fu_357_p2;
                gmem_addr_11_reg_493 <= add_ln95_fu_368_p2;
                gmem_addr_9_reg_471 <= add_ln93_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                select_ln83_reg_433 <= select_ln83_fu_277_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                select_ln91_reg_458 <= select_ln91_fu_313_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_0_AWREADY, m_axi_gmem_0_WREADY, m_axi_gmem_0_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_block_state1, p_read_2_reg_390, p_read33_read_fu_112_p2, ap_CS_fsm_state3, ap_block_state10, ap_CS_fsm_state11, icmp_ln83_1_fu_287_p2, icmp_ln91_1_fu_328_p2, ap_block_state13_io, ap_block_state14_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((p_read33_read_fu_112_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((p_read33_read_fu_112_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln83_1_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((m_axi_gmem_0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln91_1_fu_328_p2 = ap_const_lv1_1) or (p_read_2_reg_390 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((m_axi_gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((m_axi_gmem_0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((m_axi_gmem_0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((m_axi_gmem_0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((m_axi_gmem_0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln83_fu_292_p2 <= std_logic_vector(unsigned(i_fu_86) + unsigned(ap_const_lv32_1));
    add_ln91_fu_333_p2 <= std_logic_vector(unsigned(i_1_fu_90) + unsigned(ap_const_lv32_1));
    add_ln93_fu_346_p2 <= std_logic_vector(unsigned(max_output_read_reg_415) + unsigned(zext_ln91_fu_339_p1));
    add_ln94_fu_357_p2 <= std_logic_vector(unsigned(min_output_read_reg_410) + unsigned(zext_ln91_fu_339_p1));
    add_ln95_fu_368_p2 <= std_logic_vector(unsigned(avg_output_read_reg_405) + unsigned(zext_ln91_fu_339_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10)
    begin
        if ((ap_const_boolean_1 = ap_block_state10)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(m_axi_gmem_0_AWREADY)
    begin
        if ((m_axi_gmem_0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(ap_block_state13_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state13_io)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(ap_block_state14_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state14_io)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(m_axi_gmem_0_WREADY)
    begin
        if ((m_axi_gmem_0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(m_axi_gmem_0_BVALID)
    begin
        if ((m_axi_gmem_0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(m_axi_gmem_0_BVALID)
    begin
        if ((m_axi_gmem_0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(m_axi_gmem_0_BVALID)
    begin
        if ((m_axi_gmem_0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_gmem_0_AWREADY)
    begin
        if ((m_axi_gmem_0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(m_axi_gmem_0_WREADY)
    begin
        if ((m_axi_gmem_0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, conv_output_empty_n, max_output_empty_n, min_output_empty_n, avg_output_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (avg_output_empty_n = ap_const_logic_0) or (min_output_empty_n = ap_const_logic_0) or (max_output_empty_n = ap_const_logic_0) or (conv_output_empty_n = ap_const_logic_0));
    end process;


    ap_block_state10_assign_proc : process(m_axi_gmem_0_BVALID, p_read33_reg_401)
    begin
                ap_block_state10 <= ((m_axi_gmem_0_BVALID = ap_const_logic_0) and (p_read33_reg_401 = ap_const_lv1_1));
    end process;


    ap_block_state13_io_assign_proc : process(m_axi_gmem_0_AWREADY, m_axi_gmem_0_WREADY)
    begin
                ap_block_state13_io <= ((m_axi_gmem_0_WREADY = ap_const_logic_0) or (m_axi_gmem_0_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state14_io_assign_proc : process(m_axi_gmem_0_AWREADY, m_axi_gmem_0_WREADY)
    begin
                ap_block_state14_io <= ((m_axi_gmem_0_WREADY = ap_const_logic_0) or (m_axi_gmem_0_AWREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, p_read_2_reg_390, ap_CS_fsm_state11, icmp_ln91_1_fu_328_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln91_1_fu_328_p2 = ap_const_lv1_1) or (p_read_2_reg_390 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(p_read_2_reg_390, ap_CS_fsm_state11, icmp_ln91_1_fu_328_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln91_1_fu_328_p2 = ap_const_lv1_1) or (p_read_2_reg_390 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    avg_output_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, avg_output_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            avg_output_blk_n <= avg_output_empty_n;
        else 
            avg_output_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    avg_output_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            avg_output_read <= ap_const_logic_1;
        else 
            avg_output_read <= ap_const_logic_0;
        end if; 
    end process;

    avg_result_address0 <= zext_ln91_fu_339_p1(20 - 1 downto 0);
    avg_result_ce0 <= avg_result_ce0_local;

    avg_result_ce0_local_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            avg_result_ce0_local <= ap_const_logic_1;
        else 
            avg_result_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    conv_output_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, conv_output_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_output_blk_n <= conv_output_empty_n;
        else 
            conv_output_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    conv_output_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_output_read <= ap_const_logic_1;
        else 
            conv_output_read <= ap_const_logic_0;
        end if; 
    end process;

    conv_result_address0 <= zext_ln83_fu_298_p1(22 - 1 downto 0);
    conv_result_ce0 <= conv_result_ce0_local;

    conv_result_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_result_ce0_local <= ap_const_logic_1;
        else 
            conv_result_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_0_AWREADY, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_blk_n_AW <= m_axi_gmem_0_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_0_BVALID, ap_CS_fsm_state10, p_read33_reg_401, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (p_read33_reg_401 = ap_const_lv1_1)))) then 
            gmem_blk_n_B <= m_axi_gmem_0_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_0_WREADY, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_blk_n_W <= m_axi_gmem_0_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln83_1_fu_287_p2 <= "1" when (i_fu_86 = select_ln83_reg_433) else "0";
    icmp_ln83_fu_272_p2 <= "0" when (p_read_3_reg_394 = ap_const_lv32_0) else "1";
    icmp_ln91_1_fu_328_p2 <= "1" when (i_1_fu_90 = select_ln91_reg_458) else "0";
    icmp_ln91_fu_308_p2 <= "0" when (p_read_1_reg_384 = ap_const_lv32_0) else "1";
    m_axi_gmem_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_ARID <= ap_const_lv1_0;
    m_axi_gmem_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_0_ARVALID <= ap_const_logic_0;

    m_axi_gmem_0_AWADDR_assign_proc : process(m_axi_gmem_0_AWREADY, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, gmem_addr_reg_427, gmem_addr_9_reg_471, gmem_addr_10_reg_482, gmem_addr_11_reg_493, ap_block_state13_io, ap_block_state14_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            m_axi_gmem_0_AWADDR <= gmem_addr_11_reg_493;
        elsif (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_0_AWADDR <= gmem_addr_10_reg_482;
        elsif (((m_axi_gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem_0_AWADDR <= gmem_addr_9_reg_471;
        elsif (((m_axi_gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_0_AWADDR <= gmem_addr_reg_427;
        else 
            m_axi_gmem_0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_AWID <= ap_const_lv1_0;

    m_axi_gmem_0_AWLEN_assign_proc : process(m_axi_gmem_0_AWREADY, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, wide_trip_count7_i_i_fu_268_p1, ap_block_state13_io, ap_block_state14_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((m_axi_gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            m_axi_gmem_0_AWLEN <= ap_const_lv64_1(32 - 1 downto 0);
        elsif (((m_axi_gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_0_AWLEN <= wide_trip_count7_i_i_fu_268_p1(32 - 1 downto 0);
        else 
            m_axi_gmem_0_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_0_AWVALID_assign_proc : process(m_axi_gmem_0_AWREADY, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_state13_io, ap_block_state14_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((m_axi_gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((m_axi_gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_gmem_0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_0_BREADY_assign_proc : process(m_axi_gmem_0_BVALID, ap_CS_fsm_state10, p_read33_reg_401, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_block_state10)
    begin
        if ((((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10) and (p_read33_reg_401 = ap_const_lv1_1)) or ((m_axi_gmem_0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((m_axi_gmem_0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_gmem_0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_gmem_0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_RREADY <= ap_const_logic_0;

    m_axi_gmem_0_WDATA_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, conv_result_load_reg_446, max_result_load_reg_499, min_result_load_reg_504, avg_result_load_reg_509)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            m_axi_gmem_0_WDATA <= avg_result_load_reg_509;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            m_axi_gmem_0_WDATA <= min_result_load_reg_504;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            m_axi_gmem_0_WDATA <= max_result_load_reg_499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_axi_gmem_0_WDATA <= conv_result_load_reg_446;
        else 
            m_axi_gmem_0_WDATA <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_0_WID <= ap_const_lv1_0;
    m_axi_gmem_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_0_WSTRB <= ap_const_lv1_1;
    m_axi_gmem_0_WUSER <= ap_const_lv1_0;

    m_axi_gmem_0_WVALID_assign_proc : process(m_axi_gmem_0_WREADY, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_block_state13_io, ap_block_state14_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((m_axi_gmem_0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((m_axi_gmem_0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            m_axi_gmem_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    max_output_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_output_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_output_blk_n <= max_output_empty_n;
        else 
            max_output_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    max_output_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_output_read <= ap_const_logic_1;
        else 
            max_output_read <= ap_const_logic_0;
        end if; 
    end process;

    max_result_address0 <= zext_ln91_fu_339_p1(20 - 1 downto 0);
    max_result_ce0 <= max_result_ce0_local;

    max_result_ce0_local_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            max_result_ce0_local <= ap_const_logic_1;
        else 
            max_result_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    min_output_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, min_output_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            min_output_blk_n <= min_output_empty_n;
        else 
            min_output_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    min_output_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            min_output_read <= ap_const_logic_1;
        else 
            min_output_read <= ap_const_logic_0;
        end if; 
    end process;

    min_result_address0 <= zext_ln91_fu_339_p1(20 - 1 downto 0);
    min_result_ce0 <= min_result_ce0_local;

    min_result_ce0_local_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            min_result_ce0_local <= ap_const_logic_1;
        else 
            min_result_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_read33_read_fu_112_p2 <= p_read;
    select_ln83_fu_277_p3 <= 
        p_read_3_reg_394 when (icmp_ln83_fu_272_p2(0) = '1') else 
        ap_const_lv32_1;
    select_ln91_fu_313_p3 <= 
        p_read_1_reg_384 when (icmp_ln91_fu_308_p2(0) = '1') else 
        ap_const_lv32_1;
    wide_trip_count7_i_i_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_3_reg_394),64));
    zext_ln83_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_86),64));
    zext_ln91_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_90),64));
end behav;
