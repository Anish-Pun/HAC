// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module process_images_Block_entry_proc_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_height,
        img_width,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] img_height;
input  [31:0] img_width;
output  [31:0] ap_return_0;
output  [0:0] ap_return_1;
output  [31:0] ap_return_2;
output  [0:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] mul_out_0_fu_36_p2;
reg   [31:0] mul_out_0_reg_178;
reg    ap_block_state1;
wire   [30:0] select_ln88_fu_82_p3;
reg  signed [30:0] select_ln88_reg_184;
wire   [30:0] select_ln89_fu_130_p3;
reg  signed [30:0] select_ln89_reg_189;
wire   [31:0] mul10_out_0_fu_32_p2;
reg   [31:0] mul10_out_0_reg_194;
wire    ap_CS_fsm_state2;
wire  signed [31:0] tmp_fu_42_p1;
wire  signed [31:0] sub_ln88_fu_50_p1;
wire   [31:0] sub_ln88_fu_50_p2;
wire   [30:0] lshr_ln88_1_fu_56_p4;
wire  signed [31:0] lshr_ln88_2_fu_72_p1;
wire   [0:0] tmp_fu_42_p3;
wire   [30:0] sub_ln88_1_fu_66_p2;
wire   [30:0] lshr_ln88_2_fu_72_p4;
wire  signed [31:0] tmp_6_fu_90_p1;
wire  signed [31:0] sub_ln89_fu_98_p1;
wire   [31:0] sub_ln89_fu_98_p2;
wire   [30:0] lshr_ln89_1_fu_104_p4;
wire  signed [31:0] lshr_ln89_2_fu_120_p1;
wire   [0:0] tmp_6_fu_90_p3;
wire   [30:0] sub_ln89_1_fu_114_p2;
wire   [30:0] lshr_ln89_2_fu_120_p4;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln83_fu_146_p2;
wire   [0:0] icmp_ln91_fu_151_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

process_images_mul_31s_31s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
mul_31s_31s_32_1_1_U47(
    .din0(select_ln89_reg_189),
    .din1(select_ln88_reg_184),
    .dout(mul10_out_0_fu_32_p2)
);

process_images_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U48(
    .din0(img_width),
    .din1(img_height),
    .dout(mul_out_0_fu_36_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul10_out_0_reg_194 <= mul10_out_0_fu_32_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_out_0_reg_178 <= mul_out_0_fu_36_p2;
        select_ln88_reg_184 <= select_ln88_fu_82_p3;
        select_ln89_reg_189 <= select_ln89_fu_130_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = mul_out_0_reg_178;

assign ap_return_1 = icmp_ln83_fu_146_p2;

assign ap_return_2 = mul10_out_0_reg_194;

assign ap_return_3 = icmp_ln91_fu_151_p2;

assign icmp_ln83_fu_146_p2 = (($signed(mul_out_0_reg_178) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_151_p2 = (($signed(mul10_out_0_reg_194) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign lshr_ln88_1_fu_56_p4 = {{sub_ln88_fu_50_p2[31:1]}};

assign lshr_ln88_2_fu_72_p1 = img_height;

assign lshr_ln88_2_fu_72_p4 = {{lshr_ln88_2_fu_72_p1[31:1]}};

assign lshr_ln89_1_fu_104_p4 = {{sub_ln89_fu_98_p2[31:1]}};

assign lshr_ln89_2_fu_120_p1 = img_width;

assign lshr_ln89_2_fu_120_p4 = {{lshr_ln89_2_fu_120_p1[31:1]}};

assign select_ln88_fu_82_p3 = ((tmp_fu_42_p3[0:0] == 1'b1) ? sub_ln88_1_fu_66_p2 : lshr_ln88_2_fu_72_p4);

assign select_ln89_fu_130_p3 = ((tmp_6_fu_90_p3[0:0] == 1'b1) ? sub_ln89_1_fu_114_p2 : lshr_ln89_2_fu_120_p4);

assign sub_ln88_1_fu_66_p2 = (31'd0 - lshr_ln88_1_fu_56_p4);

assign sub_ln88_fu_50_p1 = img_height;

assign sub_ln88_fu_50_p2 = ($signed(32'd0) - $signed(sub_ln88_fu_50_p1));

assign sub_ln89_1_fu_114_p2 = (31'd0 - lshr_ln89_1_fu_104_p4);

assign sub_ln89_fu_98_p1 = img_width;

assign sub_ln89_fu_98_p2 = ($signed(32'd0) - $signed(sub_ln89_fu_98_p1));

assign tmp_6_fu_90_p1 = img_width;

assign tmp_6_fu_90_p3 = tmp_6_fu_90_p1[32'd31];

assign tmp_fu_42_p1 = img_height;

assign tmp_fu_42_p3 = tmp_fu_42_p1[32'd31];

endmodule //process_images_Block_entry_proc_3
