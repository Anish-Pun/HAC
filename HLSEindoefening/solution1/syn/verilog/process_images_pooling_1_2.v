// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module process_images_pooling_1_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        input_r,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        img_height,
        img_width
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [7:0] m_axi_gmem_0_WDATA;
output  [0:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [7:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [10:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [63:0] input_r;
output  [19:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [7:0] output_r_d0;
input  [31:0] img_height;
input  [31:0] img_width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_0_ARVALID;
reg[63:0] m_axi_gmem_0_ARADDR;
reg m_axi_gmem_0_RREADY;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire  signed [19:0] div133_fu_229_p3;
reg  signed [19:0] div133_reg_488;
wire   [0:0] icmp_ln30_fu_237_p2;
reg   [0:0] icmp_ln30_reg_493;
wire  signed [32:0] sext_ln30_fu_243_p1;
reg  signed [32:0] sext_ln30_reg_511;
wire  signed [32:0] sext_ln30_2_fu_251_p1;
reg  signed [32:0] sext_ln30_2_reg_516;
wire   [30:0] add_ln30_4_fu_275_p2;
reg   [30:0] add_ln30_4_reg_521;
wire  signed [61:0] img_width_cast1_fu_281_p1;
reg  signed [61:0] img_width_cast1_reg_526;
wire   [30:0] add_ln30_6_fu_303_p2;
reg   [30:0] add_ln30_6_reg_534;
wire    ap_CS_fsm_state2;
wire   [61:0] empty_45_fu_166_p2;
reg   [61:0] empty_45_reg_539;
wire  signed [63:0] tmp_cast_fu_325_p1;
reg  signed [63:0] tmp_cast_reg_544;
wire    ap_CS_fsm_state3;
wire   [19:0] empty_46_fu_162_p2;
reg   [19:0] empty_46_reg_549;
wire   [63:0] add_ln32_fu_340_p2;
reg   [63:0] add_ln32_reg_554;
reg   [63:0] gmem_addr_reg_562;
wire    ap_CS_fsm_state4;
reg   [63:0] gmem_addr_2_reg_568;
wire   [19:0] add_ln46_fu_404_p2;
reg   [19:0] add_ln46_reg_574;
wire   [31:0] add_ln31_fu_409_p2;
reg   [31:0] add_ln31_reg_579;
reg   [7:0] pool_val_reg_584;
reg   [7:0] gmem_addr_read_2_reg_589;
reg   [7:0] gmem_addr_2_read_reg_594;
wire   [8:0] add_ln43_fu_436_p2;
reg   [8:0] add_ln43_reg_599;
reg   [7:0] gmem_addr_2_read_1_reg_604;
reg   [31:0] x_reg_151;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln46_fu_478_p1;
wire   [63:0] add_ln32_6_fu_377_p2;
wire   [0:0] icmp_ln31_fu_349_p2;
wire   [63:0] add_ln32_5_fu_367_p2;
reg   [31:0] y_fu_88;
wire   [31:0] add_ln30_5_fu_415_p2;
reg   [30:0] indvar_fu_92;
reg    output_r_we0_local;
reg    output_r_ce0_local;
wire  signed [19:0] empty_46_fu_162_p0;
wire  signed [31:0] empty_45_fu_166_p0;
wire   [29:0] empty_45_fu_166_p1;
wire  signed [31:0] empty_fu_173_p0;
wire  signed [31:0] sub2_fu_183_p0;
wire  signed [31:0] tmp_2_fu_189_p1;
wire   [20:0] empty_fu_173_p1;
wire   [20:0] p_neg_fu_197_p2;
wire   [19:0] p_lshr_cast_fu_203_p4;
wire  signed [31:0] p_lshr_f_cast_fu_219_p1;
wire   [0:0] tmp_2_fu_189_p3;
wire   [19:0] p_neg_t_fu_213_p2;
wire   [19:0] p_lshr_f_cast_fu_219_p4;
wire   [31:0] sub_fu_177_p2;
wire   [31:0] sub2_fu_183_p2;
wire  signed [31:0] sext_ln30_2_fu_251_p0;
wire   [30:0] trunc_ln30_fu_247_p1;
wire   [30:0] add_ln30_fu_255_p2;
wire   [29:0] lshr_ln_fu_261_p4;
wire   [30:0] zext_ln30_fu_271_p1;
wire  signed [31:0] img_width_cast1_fu_281_p0;
wire   [29:0] empty_44_fu_309_p1;
wire   [62:0] tmp_fu_318_p3;
wire   [32:0] zext_ln31_2_fu_345_p1;
wire   [32:0] add_ln32_7_fu_358_p2;
wire  signed [63:0] sext_ln32_fu_363_p1;
wire   [63:0] zext_ln31_fu_354_p1;
wire   [63:0] add_ln32_8_fu_372_p2;
wire   [19:0] trunc_ln2_fu_394_p4;
wire   [8:0] zext_ln43_fu_433_p1;
wire   [8:0] zext_ln42_fu_430_p1;
wire   [8:0] zext_ln43_1_fu_442_p1;
wire   [8:0] zext_ln43_2_fu_445_p1;
wire   [8:0] add_ln43_1_fu_451_p2;
wire   [9:0] zext_ln43_4_fu_457_p1;
wire   [9:0] zext_ln43_3_fu_448_p1;
wire   [9:0] sum_fu_461_p2;
wire   [0:0] icmp_ln30_2_fu_298_p2;
reg   [16:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire   [61:0] empty_45_fu_166_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 y_fu_88 = 32'd0;
#0 indvar_fu_92 = 31'd0;
end

process_images_mul_20s_20s_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
mul_20s_20s_20_1_1_U32(
    .din0(empty_46_fu_162_p0),
    .din1(div133_reg_488),
    .dout(empty_46_fu_162_p2)
);

process_images_mul_32s_30ns_62_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 62 ))
mul_32s_30ns_62_1_1_U33(
    .din0(empty_45_fu_166_p0),
    .din1(empty_45_fu_166_p1),
    .dout(empty_45_fu_166_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln30_fu_237_p2 == 1'd1))) begin
        indvar_fu_92 <= 31'd0;
    end else if (((icmp_ln31_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        indvar_fu_92 <= add_ln30_6_reg_534;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        x_reg_151 <= add_ln31_reg_579;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_151 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln30_fu_237_p2 == 1'd1))) begin
        y_fu_88 <= 32'd0;
    end else if (((icmp_ln31_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        y_fu_88 <= add_ln30_5_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln30_4_reg_521 <= add_ln30_4_fu_275_p2;
        div133_reg_488 <= div133_fu_229_p3;
        icmp_ln30_reg_493 <= icmp_ln30_fu_237_p2;
        img_width_cast1_reg_526 <= img_width_cast1_fu_281_p1;
        sext_ln30_2_reg_516 <= sext_ln30_2_fu_251_p1;
        sext_ln30_reg_511 <= sext_ln30_fu_243_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln30_6_reg_534 <= add_ln30_6_fu_303_p2;
        empty_45_reg_539 <= empty_45_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln31_reg_579 <= add_ln31_fu_409_p2;
        add_ln46_reg_574 <= add_ln46_fu_404_p2;
        gmem_addr_2_reg_568 <= add_ln32_5_fu_367_p2;
        gmem_addr_reg_562 <= add_ln32_6_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln32_reg_554 <= add_ln32_fu_340_p2;
        empty_46_reg_549 <= empty_46_fu_162_p2;
        tmp_cast_reg_544[63 : 1] <= tmp_cast_fu_325_p1[63 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln43_reg_599 <= add_ln43_fu_436_p2;
        gmem_addr_2_read_reg_594 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_addr_2_read_1_reg_604 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gmem_addr_read_2_reg_589 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        pool_val_reg_584 <= m_axi_gmem_0_RDATA;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & ((icmp_ln30_2_fu_298_p2 == 1'd1) | (icmp_ln30_reg_493 == 1'd0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln30_2_fu_298_p2 == 1'd1) | (icmp_ln30_reg_493 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_blk_n_AR = m_axi_gmem_0_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        gmem_blk_n_R = m_axi_gmem_0_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            m_axi_gmem_0_ARADDR = gmem_addr_2_reg_568;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            m_axi_gmem_0_ARADDR = gmem_addr_reg_562;
        end else begin
            m_axi_gmem_0_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        m_axi_gmem_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((m_axi_gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((m_axi_gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)))) begin
        m_axi_gmem_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_ce0_local = 1'b1;
    end else begin
        output_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_we0_local = 1'b1;
    end else begin
        output_r_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln30_2_fu_298_p2 == 1'd1) | (icmp_ln30_reg_493 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln31_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((m_axi_gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((m_axi_gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((m_axi_gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((m_axi_gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_4_fu_275_p2 = (zext_ln30_fu_271_p1 + 31'd1);

assign add_ln30_5_fu_415_p2 = (y_fu_88 + 32'd2);

assign add_ln30_6_fu_303_p2 = (indvar_fu_92 + 31'd1);

assign add_ln30_fu_255_p2 = ($signed(trunc_ln30_fu_247_p1) + $signed(31'd2147483647));

assign add_ln31_fu_409_p2 = (x_reg_151 + 32'd2);

assign add_ln32_5_fu_367_p2 = ($signed(sext_ln32_fu_363_p1) + $signed(add_ln32_reg_554));

assign add_ln32_6_fu_377_p2 = ($signed(add_ln32_8_fu_372_p2) + $signed(tmp_cast_reg_544));

assign add_ln32_7_fu_358_p2 = ($signed(sext_ln30_2_reg_516) + $signed(zext_ln31_2_fu_345_p1));

assign add_ln32_8_fu_372_p2 = (zext_ln31_fu_354_p1 + input_r);

assign add_ln32_fu_340_p2 = ($signed(tmp_cast_fu_325_p1) + $signed(input_r));

assign add_ln43_1_fu_451_p2 = (zext_ln43_1_fu_442_p1 + zext_ln43_2_fu_445_p1);

assign add_ln43_fu_436_p2 = (zext_ln43_fu_433_p1 + zext_ln42_fu_430_p1);

assign add_ln46_fu_404_p2 = (trunc_ln2_fu_394_p4 + empty_46_reg_549);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign div133_fu_229_p3 = ((tmp_2_fu_189_p3[0:0] == 1'b1) ? p_neg_t_fu_213_p2 : p_lshr_f_cast_fu_219_p4);

assign empty_44_fu_309_p1 = indvar_fu_92[29:0];

assign empty_45_fu_166_p0 = img_width_cast1_reg_526;

assign empty_45_fu_166_p1 = empty_45_fu_166_p10;

assign empty_45_fu_166_p10 = empty_44_fu_309_p1;

assign empty_46_fu_162_p0 = {{y_fu_88[20:1]}};

assign empty_fu_173_p0 = img_width;

assign empty_fu_173_p1 = empty_fu_173_p0[20:0];

assign icmp_ln30_2_fu_298_p2 = ((indvar_fu_92 == add_ln30_4_reg_521) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_237_p2 = (($signed(sub_fu_177_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_349_p2 = (($signed(zext_ln31_2_fu_345_p1) < $signed(sext_ln30_reg_511)) ? 1'b1 : 1'b0);

assign img_width_cast1_fu_281_p0 = img_width;

assign img_width_cast1_fu_281_p1 = img_width_cast1_fu_281_p0;

assign lshr_ln_fu_261_p4 = {{add_ln30_fu_255_p2[30:1]}};

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 64'd2;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 8'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 1'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign output_r_address0 = zext_ln46_fu_478_p1;

assign output_r_ce0 = output_r_ce0_local;

assign output_r_d0 = {{sum_fu_461_p2[9:2]}};

assign output_r_we0 = output_r_we0_local;

assign p_lshr_cast_fu_203_p4 = {{p_neg_fu_197_p2[20:1]}};

assign p_lshr_f_cast_fu_219_p1 = img_width;

assign p_lshr_f_cast_fu_219_p4 = {{p_lshr_f_cast_fu_219_p1[20:1]}};

assign p_neg_fu_197_p2 = (21'd0 - empty_fu_173_p1);

assign p_neg_t_fu_213_p2 = (20'd0 - p_lshr_cast_fu_203_p4);

assign sext_ln30_2_fu_251_p0 = img_width;

assign sext_ln30_2_fu_251_p1 = sext_ln30_2_fu_251_p0;

assign sext_ln30_fu_243_p1 = $signed(sub2_fu_183_p2);

assign sext_ln32_fu_363_p1 = $signed(add_ln32_7_fu_358_p2);

assign sub2_fu_183_p0 = img_width;

assign sub2_fu_183_p2 = ($signed(sub2_fu_183_p0) + $signed(32'd4294967295));

assign sub_fu_177_p2 = ($signed(img_height) + $signed(32'd4294967295));

assign sum_fu_461_p2 = (zext_ln43_4_fu_457_p1 + zext_ln43_3_fu_448_p1);

assign tmp_2_fu_189_p1 = img_width;

assign tmp_2_fu_189_p3 = tmp_2_fu_189_p1[32'd31];

assign tmp_cast_fu_325_p1 = $signed(tmp_fu_318_p3);

assign tmp_fu_318_p3 = {{empty_45_reg_539}, {1'd0}};

assign trunc_ln2_fu_394_p4 = {{x_reg_151[20:1]}};

assign trunc_ln30_fu_247_p1 = sub_fu_177_p2[30:0];

assign zext_ln30_fu_271_p1 = lshr_ln_fu_261_p4;

assign zext_ln31_2_fu_345_p1 = x_reg_151;

assign zext_ln31_fu_354_p1 = x_reg_151;

assign zext_ln42_fu_430_p1 = pool_val_reg_584;

assign zext_ln43_1_fu_442_p1 = gmem_addr_2_read_reg_594;

assign zext_ln43_2_fu_445_p1 = gmem_addr_2_read_1_reg_604;

assign zext_ln43_3_fu_448_p1 = add_ln43_reg_599;

assign zext_ln43_4_fu_457_p1 = add_ln43_1_fu_451_p2;

assign zext_ln43_fu_433_p1 = gmem_addr_read_2_reg_589;

assign zext_ln46_fu_478_p1 = add_ln46_reg_574;

always @ (posedge ap_clk) begin
    tmp_cast_reg_544[0] <= 1'b0;
end

endmodule //process_images_pooling_1_2
